<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:util="http://www.springframework.org/schema/util"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
      http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.5.xsd">

	<import resource="applicationContext-actions-notifications.xml" />
    <import resource="applicationContext-actions-createperson.xml" />

    <!--
        This spring file contains the configuration for the actions and their
        associated strategies.  This includes ServiceActions, TaskHandlerServiceActions,
        AsyncActions and TaskHandlerAsyncActions.  For information about the Action Framework
        please refer to the Action Framework Software Architecture documentation.

        The actions in this file do not require the ServletContext to perform
        their actions. Servlet Context actions can be found in the
        applicationContext-servletcontextaware-framework-actions.xml file.
    -->

    <!-- ************************* -->
    <!-- TaskHandler configuration -->
    <!-- ************************* -->

    <bean id="applicationContextHolder" class="org.eurekastreams.server.service.actions.strategies.ApplicationContextHolder" />

	<!-- Executes the action in-line -->
    <bean id="executingTaskHandler" class="org.eurekastreams.commons.task.ExecutingTaskHandler">
    	<constructor-arg ref="asyncActionController" />
    </bean>

    <!-- Does not execute the action, only logs -->
    <bean id="nullTaskHandler" class="org.eurekastreams.commons.task.NullTaskHandler" />

    <!-- ****************************** -->
    <!-- Action Framework configuration -->
    <!-- ****************************** -->

	<!-- 
		actionExecutor should be defined here, except that this file is included from both the main and OpenSocial 
		container contexts, and actionExecutor references persistentBeanManager which is only defined in the main context. 
	-->

    <bean id="principalPopulator"
        class="org.eurekastreams.server.action.principal.SpringSecurityContextPrincipalPopulator">
        <constructor-arg value="true" />
    </bean>

    <bean id="springSecurityContextPrincipalPopulatorAllowNull"
        class="org.eurekastreams.server.action.principal.SpringSecurityContextPrincipalPopulator">
        <constructor-arg value="false" />
    </bean>
	
    <bean id="serviceActionController" class="org.eurekastreams.commons.server.service.ServiceActionController">
        <constructor-arg ref="transactionManager"/>
    </bean>

    <bean id="asyncActionController" class="org.eurekastreams.commons.server.async.AsyncActionController">
        <constructor-arg ref="transactionManager"/>
    </bean>


	<!-- ========== TRANSFORMERS ========== -->

    <bean id="passThruRequestTransformer" class="org.eurekastreams.server.action.request.transformer.PassThruRequestTransformer"/>

    <bean id="wrapInListRequestTransformer" class="org.eurekastreams.server.action.request.transformer.WrapInListRequestTransformer"/>

	<bean id="usePrincipalPersonIdRequestTransformer" class="org.eurekastreams.server.action.request.transformer.UsePrincipalPersonIdRequestTransformer" />
	
	<bean id="hasGroupIdToGroupIdRequestTransformer" class="org.eurekastreams.server.action.request.transformer.HasGroupIdToGroupIdRequestTransformer" />


	<!-- ========== AUTHORIZATIONS ========== -->

    <!-- Ensures the current user is a system admin -->
    <bean id="isSystemAdminAuthorization" class="org.eurekastreams.server.action.authorization.CurrentUserIsSystemAdministratorAuthorization">
        <constructor-arg ref="getSystemAdministratorIds" />
    </bean>

    <!-- Ensures the current user is a a system admin or a group coordinator for the group referenced in the request -->
    <bean id="groupCoordinatorAuthorization" class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
        <constructor-arg ref="hasGroupIdToGroupIdRequestTransformer" />
        <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
    </bean>


	<!-- ========== BASE ACTIONS ========== -->

    <bean id="baseParamExecuteDomainMapperExecution" abstract="true"
    	class="org.eurekastreams.server.action.execution.ExecuteDomainMapperExecution">
        <constructor-arg ref="passThruRequestTransformer" />
    </bean>

    <bean id="baseParamListExecuteDomainMapperExecution" abstract="true"
    	class="org.eurekastreams.server.action.execution.ExecuteDomainMapperExecution">
        <constructor-arg ref="wrapInListRequestTransformer" />
    </bean>

	<!-- ========== SUPPORT CLASSES ========== -->

    <!--bean id="applicationProperties"
        class="org.eurekastreams.server.service.utility.ResourcePropertyFileLoaderFactoryBean">
        <constructor-arg value="classpath:conf/eurekastreams-server.properties" />
    </bean-->
	<bean id="applicationProperties" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" ref="propertyPlaceholderConfigurer" />
		<property name="targetMethod" value="getRawProperties" />
	</bean>
	<bean id="applicationPropertiesAccessor" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetObject" ref="propertyPlaceholderConfigurer" />
		<property name="targetMethod" value="getPropertyAccessor" />
	</bean>

	<!-- ========== API SUPPORT CLASSES ========== -->
	
	<bean id="exceptionSanitizer" class="org.eurekastreams.commons.server.ExceptionSanitizer" />


    <bean id="membershipCriteriaPersonPropertyGenerator" class="org.eurekastreams.server.service.actions.strategies.MembershipCriteriaPersonPropertyGenerator">
        <!-- tab name - must be less than 16 characters long -->
        <constructor-arg value="Welcome" />
        <!-- layout -->
        <constructor-arg value="THREECOLUMN" />
        <constructor-arg ref="membershipCriteriaDbMapper" />
    </bean>


    <!-- ******************** -->
    <!-- Action configuration -->
    <!-- ******************** -->

    <bean id="authorizeUpdateGroup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="noAuthorizationStrategy" />
        <!-- Execution -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.CoordinatorAccessAuthorizerExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.EntityIdFromUniqueStringKeyParameter">
                        <constructor-arg ref="bulkDomainGroupsByShortNameMapper"/>
                        <property name="returnValueAsString" value="true" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="registerUsageMetric" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.RegisterUsageMetricExecution">
                <constructor-arg ref="getStreamScopeIdForPersonByUniqueKeyMapper" />
                <constructor-arg ref="getStreamScopeIdForGroupTypeByUniqueKeyMapper" />
                <constructor-arg ref="dayOfWeekStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>
    

    <bean id="persistUserMetricAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg>
		            <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
		        </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    
    <bean id="getFeaturedStreams" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg ref="getFeaturedStreamsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    
    <bean id="addFeaturedStream" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.stream.AddFeaturedStreamValidation">
                <constructor-arg value="250"/>
                <constructor-arg ref="findByIdMapper" />
            </bean>
        </constructor-arg>
        <!-- Authorization -->
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.AddFeaturedStreamExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.GetPlaceholderEntityMapper">
                        <constructor-arg value="org.eurekastreams.server.domain.stream.StreamScope" />
                    </bean>
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>  
    
    <bean id="deleteFeaturedStream" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.DeleteFeaturedStreamExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.DeleteEntityByIdDbMapper">
                        <constructor-arg value="org.eurekastreams.server.domain.stream.FeaturedStream" />
                    </bean>                        
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>  

    <bean id="updateMembershipTaskHandler" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="isSystemAdminAuthorization" />
        <!-- Execution -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.QueueAsynchActionExecution">
                <constructor-arg value="clientInvokedRefreshMembershipAction" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />
    </bean>

    <!-- Similar to refreshMembershipAction, but hooked up to client button and to allows for different "refresh" functionality
    than the quartz job, which invokes refreshMembershipAction-->
    <bean id="clientInvokedRefreshMembershipAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.settings.RefreshPeopleExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.settings.PersonSourceLDAP">
                        <constructor-arg ref="membershipCriteriaDTODbMapper" />
                        <constructor-arg ref="ldapPersonLookupViaLdapGroupMembership" />
                        <constructor-arg ref="ldapPersonLookupViaAttributeQuery" />
                    </bean>
                </constructor-arg>
                <constructor-arg value="createPersonAction"/>
                <!-- NOTE: Set value below to "setPersonLockedStatusAction" or "" to enable/disable locking/unlocking  -->
                <constructor-arg value="setPersonLockedStatusAction"/>
                <constructor-arg value="refreshPersonAction"/>
                <constructor-arg ref="getPersonAccountIdsByLockedStatus"/>
                <constructor-arg ref="findSystemSettings" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />
    </bean>

    <bean id="refreshMembershipAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.settings.RefreshPeopleExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.settings.PersonSourceLDAP">
                        <constructor-arg ref="membershipCriteriaDTODbMapper" />
                        <constructor-arg ref="ldapPersonLookupViaLdapGroupMembership" />
                        <constructor-arg ref="ldapPersonLookupViaAttributeQuery" />
                    </bean>
                </constructor-arg>
                <constructor-arg value="createPersonAction"/>
                <!-- NOTE: Set value below to "setPersonLockedStatusAction" or "" to enable/disable locking/unlocking  -->
                <constructor-arg value=""/>
                <constructor-arg value="refreshPersonAction"/>
                <constructor-arg ref="getPersonAccountIdsByLockedStatus"/>
                <constructor-arg ref="findSystemSettings" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />
    </bean>

    <bean id="createPersonFromLdap" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.CreatePersonFromLdapExecution">
                <constructor-arg ref="ldapPersonLookupViaAccountIdAttribute" />
                <constructor-arg ref="createPersonExecution" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="indexActivityById" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.IndexDomainEntityByIdExecution">
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="indexEntity" />
                <constructor-arg value="Activity" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="indexPersonById" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.IndexDomainEntityByIdExecution">
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="indexEntity" />
                <constructor-arg value="Person" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <!-- Delete old StreamHashTag records older than the configurable value
-->
    <bean id="deleteOldStreamHashTagsAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.DeleteOldStreamHashTagsExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.DeleteOldStreamHashTagRecordsDbMapper" />
                </constructor-arg>
                <constructor-arg value="${eureka.stream.popularhashtags.activitywindowinminutes}" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="createPersonAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="createPersonExecution"/>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="createPersonExecution" class="org.eurekastreams.server.action.execution.settings.CreatePersonExecution">
         <constructor-arg ref="createPersonActionFactory" />
         <constructor-arg ref="jpaPersonMapper" />
         <!-- email action ref -->
         <constructor-arg value="sendWelcomeEmail"/>
    </bean>

    <bean id="setPersonLockedStatusAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.settings.SetPersonLockedStatusExecution">
                <constructor-arg ref="setPersonLockedStatus" />
                <constructor-arg ref="getPersonIdByAccountIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="refreshPersonAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.settings.RefreshPersonExecution">
                <constructor-arg ref="updatePersonMapper" />
        		<constructor-arg ref="updatePersonDisplayNameCaches" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>


    <bean id="deleteGroupExecution" class="org.eurekastreams.server.action.execution.profile.DeleteGroupFromDBExecution">
        <constructor-arg ref="deleteGroupActivity" />
        <constructor-arg ref="removeGroupFollowers" />
        <constructor-arg ref="deleteGroup" />
        <constructor-arg ref="deleteGroupSubscriptions" />
        <constructor-arg value="10000" />
    </bean>

    <bean id="deleteGroupAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.profile.DeleteGroupValidation">
                <constructor-arg ref="findByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.ToStringTransformer" />
                </constructor-arg>
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
            </bean>
        </constructor-arg>
        <constructor-arg ref="deleteGroupExecution" />
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteCacheKeysAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.DeleteCacheKeysExecution">
                <constructor-arg ref="deleteCacheKeys" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="deleteFromSearchIndexAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.DeleteFromSearchIndexExecution">
                <constructor-arg ref="deleteFromSearchIndex" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="sendWelcomeEmail" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.SendWelcomeEmailExecution">
                    <constructor-arg ref="emailerFactory" />
                    <constructor-arg type="java.lang.String" value="${eureka.web.baseurlpath}" />
                    <constructor-arg type="java.lang.String" value="Welcome to Eureka Streams" />
                    <constructor-arg type="java.lang.String" value="Congratulations! You have just been given access to Eureka Streams. Eureka streams enables knowledge workers to make informed, timely decisions by finding relevant colleagues and groups, following their stream of activity, and engaging in conversation.&lt;br/&gt;&lt;a href='$(url)'&gt;Set up your profile&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;Thank you,&lt;br/&gt;Eureka Product Team" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="addMembershipCriteria" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.ExecuteDomainMapperExecution">
                <constructor-arg >
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.ActionContextMembershipCriteriaDTOToMembershipCriteriaPersistenceRequestTransformer">
                        <constructor-arg>
	                        <bean class="org.eurekastreams.server.persistence.mappers.db.GetPlaceholderEntityMapper">
						        <constructor-arg value="org.eurekastreams.server.domain.Theme" />
						    </bean>
						</constructor-arg>
						<constructor-arg>
						    <bean class="org.eurekastreams.server.persistence.mappers.db.GetPlaceholderEntityMapper">
	                            <constructor-arg value="org.eurekastreams.server.domain.GalleryTabTemplate" />
	                        </bean>
                        </constructor-arg>
                    </bean>
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>              
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="removeMembershipCriteria" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />   
        <constructor-arg>     
	        <bean parent="baseParamExecuteDomainMapperExecution">
	                <constructor-arg>
	                    <bean class="org.eurekastreams.server.persistence.mappers.db.DeleteEntityByIdDbMapper">
	                        <constructor-arg value="org.eurekastreams.server.domain.MembershipCriteria" />
	                    </bean>                        
	                </constructor-arg>
	        </bean>        
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <!-- Get the popular hashtags for a person, org, or group stream -->
    <bean id="getPopularHashTagsForStream" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <!--
                Authorizor checks if the stream is for a group, and if so, checks if it's private, and if so, makes sure
                user is either a coordinator or follower of the group.
             -->
            <bean class="org.eurekastreams.server.action.authorization.stream.StreamPopularHashTagsAuthorization">
                <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                <constructor-arg ref="getPrivateCoordinatedAndFollowedGroupIdsForUserMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.GetStreamPopularHashTagsExecution">
                <constructor-arg ref="findPopularHashTagsForStreamMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

     <bean id="getAllPopularHashTags" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.GetAllPopularHashTagsFromGroupsJoinedExecution">
                <constructor-arg ref="findPopularHashTagsForAllGroupsJoinedMapper" />
                <constructor-arg>
                    <bean
                        class="org.eurekastreams.server.action.execution.stream.GetCurrentUserFollowedGroupsExecution">
                        <constructor-arg ref="getFollowedGroupIdsForPersonByIdMapper" />
                        <constructor-arg ref="getGroupsByIdsMapper" />
                        <constructor-arg ref="getPersonsByIdsMapper" />
                        <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="refreshFollowedByActivities" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg ref="getFollowedByActivities_FORCE_REFRESH" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="postSplitActivityAndCommentsAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
		<constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.PostSplitActivityAndCommentsExecution">
            	<constructor-arg>
            		<bean class="org.eurekastreams.server.service.utility.TextSplitter">
            			<constructor-arg value="${eureka.constants.maxActivityBodyLength}" />
            			<constructor-arg value="${eureka.constants.maxCommentBodyLength}" />
            		</bean>
            	</constructor-arg>
                <constructor-arg>
                	<bean class="org.eurekastreams.commons.actions.InlineActionExecutor">
                		<constructor-arg value="false" />
                	</bean>
                </constructor-arg>
                <constructor-arg>
                	<map>
                		<entry key="PERSON" value-ref="postPersonActivityServiceActionTaskHandler" />
                		<entry key="GROUP" value-ref="postGroupActivityServiceActionTaskHandler" />
                	</map>
                </constructor-arg>
                <constructor-arg ref="postActivityCommentAction" />
                <constructor-arg>
                	<map>
                		<entry key="PERSON" value-ref="getPersonAccountIdByIdMapper" />
                		<entry key="GROUP" value-ref="getGroupUniqueIdByIdMapper" />
                	</map>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>


	<bean id="postActivityCommentAuthorizer" class="org.eurekastreams.server.service.utility.authorization.ActivityInteractionAuthorizationStrategy">
		<constructor-arg ref="getPersonByIdMapper" />
		<constructor-arg ref="getGroupByIdMapper" />
		<constructor-arg ref="getFollowerPersonIdsForGroupByIdMapper" />
		<constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
	</bean>

	<bean id="postActivityCommentValidation" class="org.eurekastreams.server.action.validation.stream.PostActivityCommentValidation"/>

	<bean id="postActivityCommentAuthorization" class="org.eurekastreams.server.action.authorization.stream.ActivityAuthorizationStrategy">
       	<constructor-arg ref="postActivityCommentAuthorizer" />
       	<constructor-arg value="COMMENT" />
       	<constructor-arg>
       		<bean class="org.eurekastreams.server.action.request.transformer.ActivityIdFromCommentDTOTransformer" />
       	</constructor-arg>
       	<constructor-arg ref="activityDTOMapperThrowException" />
	</bean>

    <bean id="postActivityCommentAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="postActivityCommentValidation" />
        <constructor-arg ref="postActivityCommentAuthorization" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.PostActivityCommentExecution">
                    <constructor-arg ref="insertActivityComment" />
                    <constructor-arg ref="activityDTOMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="postSplitActivityCommentsAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="postActivityCommentValidation" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.PostSplitActivityCommentsExecution">
            	<constructor-arg>
            		<bean class="org.eurekastreams.server.service.utility.TextSplitter">
            			<constructor-arg value="${eureka.constants.maxCommentBodyLength}" />
            			<constructor-arg value="${eureka.constants.maxCommentBodyLength}" />
            		</bean>
            	</constructor-arg>
                <constructor-arg>
                	<bean class="org.eurekastreams.commons.actions.InlineActionExecutor">
                		<constructor-arg value="false" />
                	</bean>
                </constructor-arg>
                <constructor-arg ref="postActivityCommentAction" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="deleteComment" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.stream.CommentModificationAuthorization">
                <constructor-arg ref="getCommentsById" />
                <constructor-arg ref="bulkActivitiesMapper" />
                <constructor-arg ref="commentDeletePropertyStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.DeleteActivityCommentExecution">
                <constructor-arg ref="deleteActivityComment" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="deleteActivityAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.stream.DeleteActivityAuthorization">
                <constructor-arg ref="bulkActivitiesMapper" />
                <constructor-arg ref="activityDeletePropertyStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.DeleteActivityExecution">
                <constructor-arg ref="deleteActivity" />
                <constructor-arg ref="getOrderedCommentIdsByActivityIdMapper" />
                <constructor-arg ref="getPersonIdsWithStarredActivity" />
                <constructor-arg ref="getGroupByIdMapperAllowNullResult" />
                <constructor-arg>
                	<bean class="org.eurekastreams.commons.actions.InlineExecutionStrategyWrappingExecutor">
                		<constructor-arg value="true" />
                		<constructor-arg ref="updateGroupStickyActivityExecution" />
                	</bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="hideResourceActivity" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.stream.DeleteActivityAuthorization">
                <constructor-arg ref="bulkActivitiesMapper" />
                <constructor-arg ref="activityDeletePropertyStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.HideResourceActivityExecution">
                <constructor-arg ref="hideResourceActivityMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="hideResourceActivityCacheUpdate" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg ref="hideResourceActivityCacheUpdateMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="renameTab" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.start.RenameTabValidation"/>
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.authorization.start.RenameTabAuthorization">
                <constructor-arg ref="tabPermission" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.RenameTabExecution">
                <constructor-arg ref="jpaTabMapper" />
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="undeleteTab" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.UndeleteTabExecution">
                <constructor-arg ref="jpaPortalPageMapper" />
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="reorderGadget" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.start.ReorderGadgetValidation">
              <constructor-arg ref="jpaTabMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.ReorderGadgetExecution">
                <constructor-arg ref="jpaTabMapper" />
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteActivityCacheUpdate" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteActivityCacheUpdateExecution">
                <constructor-arg ref="deleteActivityCacheUpdateDAO" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteExpiredActivities" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteExpiredActivitiesExecution">
                <constructor-arg ref="findSystemSettings" />
                <constructor-arg ref="getExpiredActivities" />
                <!-- Chunk size for breaking expired activities into smaller pieces for processing -->
                <constructor-arg type="int" value="1000" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="deleteExpiredActivitiesOnDemand" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteExpiredActivitiesExecution">
                <constructor-arg ref="findSystemSettings" />
                <constructor-arg ref="getExpiredActivities" />
                <!-- Chunk size for breaking expired activities into smaller pieces for processing -->
                <constructor-arg type="int" value="1000" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="deleteActivitiesByIds" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteActivitiesByIdsExecution">
                <constructor-arg ref="getListsContainingActivities" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.DeleteActivities"/>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <!-- This bean is used by ActivityServiceImpl -->
    <bean id="deleteUserActivities" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.stream.DeleteUserActivityValidation">
                <constructor-arg ref="bulkActivitiesMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteActivitiesByIdsExecution">
                <constructor-arg ref="getListsContainingActivities" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.DeleteActivities"/>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="deleteIdsFromLists" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteIdsFromListsExecution">
                <constructor-arg ref="removeIdsFromLists" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="updateSystemSettings" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.settings.UpdateSystemSettingsValidation">
                <constructor-arg ref="getPersonsByIdsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.settings.UpdateSystemSettingsExecution">
                <constructor-arg ref="findSystemSettingsFromDatabase" />
                <constructor-arg ref="updaterStrategy" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper">
                        <!-- Wrapped updater to clear the SystemSettings cache -->
                        <constructor-arg ref="deleteSystemSettingsCacheMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="setSystemAdminsDbMapper" />
                <constructor-arg ref="getSystemAdministratorIdsDbMapper" />
                <constructor-arg ref="getPeopleIdsByAccountIdsMapper" />
                <constructor-arg ref="memcachedCache" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="deleteAppData" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.DeleteAppDataExecution">
                <constructor-arg ref="jpaAppDataMapper" />
                <constructor-arg ref="memcachedCache" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="updateGadgetUserPrefById" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.start.UpdateGadgetUserPrefByIdValidation" />
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.UpdateGadgetUserPrefByIdExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
                </constructor-arg>
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="getPersonPagePropertiesById_FORCE_REFRESH" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="domainGroupCacheUpdaterAsyncAction"
        class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.DomainGroupCacheUpdaterAsyncExecution">
                <constructor-arg ref="getActivityIdsAuthoredByOrOriginallyAuthoredByEntityDBMapper" />
                <constructor-arg ref="saveDomainGroupCoordinatorsListToCacheMapper" />
                <constructor-arg ref="jpaGroupMapper" />
                <constructor-arg ref="addPrivateGroupIdToCachedCoordinatorAccessList" />
                <constructor-arg ref="memcachedCache" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="activityRecipientDomainGroupNameUpdaterAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <!-- Async action to update the recipient scope name of every activity posted to a domain group
-->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.ActivityRecipientStreamNameCacheUpdateAsyncExecution">
                <!-- stream scope type -->
                <constructor-arg value="GROUP" />

                <!-- mapper to get the domain name -->
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.GetFieldFromTableByUniqueField">
                        <constructor-arg value="DomainGroup" />
                        <constructor-arg value="shortName" />
                        <constructor-arg value="name" />
                    </bean>
                </constructor-arg>

                <!-- mapper to get ids of activities to update -->
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.GetActivityIdsPostedToStreamByUniqueKeyAndScopeType" />
                </constructor-arg>

                <!-- cache updater -->
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateDestinationStreamNameInCachedActivity">
                        <!-- batch size for cache gets -->
                        <constructor-arg value="100" />
                        <property name="cache" ref="memcachedCache" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="activityRecipientPersonNameUpdaterAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <!-- Async action to update the recipient scope name of every activity posted to a person's stream
-->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.ActivityRecipientStreamNameCacheUpdateAsyncExecution">
                <!-- stream scope type -->
                <constructor-arg value="PERSON" />

                <!-- mapper to get the person name -->
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.GetFieldFromTableByUniqueField">
                        <constructor-arg value="Person" />
                        <constructor-arg value="accountId" />
                        <constructor-arg value="displayName" />
                    </bean>
                </constructor-arg>

                <!-- mapper to get ids of activities to update -->
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.GetActivityIdsPostedToStreamByUniqueKeyAndScopeType" />
                </constructor-arg>

                <!-- cache updater -->
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateDestinationStreamNameInCachedActivity">
                        <!-- batch size for cache gets -->
                        <constructor-arg value="100" />
                        <property name="cache" ref="memcachedCache" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="setPersonTheme" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- fields: "themeId" (uuid or url)  -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.gallery.ThemeIdValidation">
                <constructor-arg ref="jpaThemeMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.SetPersonThemeExecution">
                <constructor-arg ref="jpaPersonMapper" />
                <constructor-arg ref="jpaThemeMapper" />
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteThemeAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.HideGalleryItemThenQueueTaskExecution">
                <constructor-arg ref="jpaThemeMapper" />
                <constructor-arg value="deleteThemeAsyncAction" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteThemeAsyncAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.DeleteThemeExecution">
                <constructor-arg ref="findByIdMapper"/>
                <constructor-arg ref="deleteThemeByIdDbMapper"/>
                <constructor-arg ref="getPeopleIdsUsingThemeByThemeId"/>
                <constructor-arg value="deleteCacheKeysAction" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteGadgetDefinitionAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.HideGalleryItemThenQueueTaskExecution">
                <constructor-arg ref="jpaGadgetDefinitionMapper" />
                <constructor-arg value="deleteGadgetDefinitionAsyncAction" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

       <bean id="deletePluginDefinitionAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.DeleteGalleryItemExecution">
                <constructor-arg ref="jpaPluginDefinitionMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteGadgetDefinitionAsyncAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
    	<constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.DeleteGadgetDefinitionExecution">
				<constructor-arg>
					<bean class="org.eurekastreams.server.persistence.mappers.db.DeleteGadgetDefinition" />
				</constructor-arg>
                <constructor-arg>
                	<bean class="org.eurekastreams.server.persistence.mappers.db.GetZonesToCompressForGadgetDefinition" />
                </constructor-arg>
                <constructor-arg value="compressGadgetZoneAction" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="compressGadgetZoneAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
    	<constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.CompressGadgetZoneExecution">
                <constructor-arg>
                	<bean class="org.eurekastreams.server.persistence.mappers.db.GetVisibleGadgetsInZone" />
                </constructor-arg>
                <constructor-arg>
                	<bean class="org.eurekastreams.server.persistence.mappers.cache.PrefixingCacheKeyAdaptor">
                		<constructor-arg>
                			<util:constant static-field="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.PERSON_PAGE_PROPERTIES_BY_ID" />
                		</constructor-arg>
                		<constructor-arg ref="deleteCacheKeys" />
                	</bean>
                </constructor-arg>
<!-- NOTE: getPersonPagePropertiesById_FORCE_REFRESH is currently not available, so we use the mapper above instead.
	It only deletes the cached value but doesn't reload, so it should be swapped out when the below is ready.
-->
<!--                <constructor-arg ref="getPersonPagePropertiesById_FORCE_REFRESH" />-->
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="updateAppData" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.UpdateAppDataExecution">
                <constructor-arg ref="jpaAppDataMapper" />
                <constructor-arg ref="memcachedCache" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="getGroupModelView" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetDomainGroupModelViewByShortNameExecution">
                <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
                <constructor-arg ref="getFollowerPersonIdsForGroupByIdMapper" />
                <constructor-arg ref="getGroupCoordinatorIdsByGroupIdMapper" />
                <constructor-arg ref="getPersonsByIdsMapper" />
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="activityDTOMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="addGadget" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="addGadgetAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.AddGadgetExecution">
                <constructor-arg ref="jpaTabMapper" />
                <constructor-arg ref="jpaPersonMapper" />
                <constructor-arg ref="jpaGadgetDefinitionMapper" />
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="addGadgetAuthorization"
        class="org.eurekastreams.server.action.authorization.start.AddGadgetAuthorization">
        <constructor-arg ref="jpaTabMapper" />
        <constructor-arg ref="tabPermission" />
        <constructor-arg ref="jpaPersonMapper" />
    </bean>

    <bean id="addTab" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="addTabValidation" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.AddTabExecution">
                <constructor-arg ref="jpaPersonMapper" />
                <constructor-arg ref="jpaTabMapper" />
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="addTabValidation" class="org.eurekastreams.server.action.validation.start.AddTabValidation">
        <constructor-arg ref="findByIdMapper" />
    </bean>

    <bean id="addTabFromGalleryValidation" class="org.eurekastreams.server.action.validation.start.AddTabValidation">
        <constructor-arg ref="findByIdMapper" />
        <constructor-arg value="false" />
    </bean>

    <bean id="insertOptOutVideo" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.SetOptOutVideoValidation">
                <constructor-arg ref="findByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.SetOptOutVideoExecution">
                <constructor-arg ref="jpaPersonMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="getTutorialVideo" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.GetTutorialVideoExecution">
                <constructor-arg ref="getTutorialVideos" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getStreamsUserIsFollowing" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />        
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.GetStreamsUserIsFollowingExecution">  
                <constructor-arg ref="getPersonIdByAccountIdMapper" />              
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.ExcludeSelfMapperDecorator">
                        <constructor-arg ref="getFollowedPersonIdsForPersonByIdMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="getFollowedGroupIdsForPersonByIdMapper" />
                <constructor-arg ref="getPersonsByIdsMapper" />
                <constructor-arg ref="getGroupsByIdsMapper" />
                <constructor-arg ref="followerStatusPopulator" /> 
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>       

    <bean id="getPersonFollowers" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.GetFollowingExecution">
        		<constructor-arg ref="getPersonIdByAccountIdMapper" />
        		<constructor-arg>
            		<bean class="org.eurekastreams.server.persistence.mappers.ExcludeSelfMapperDecorator">
                		<constructor-arg ref="getFollowerPersonIdsForPersonByIdMapper" />
            		</bean>
        		</constructor-arg>
        		<constructor-arg ref="getPersonsByIdsMapper" />
                <constructor-arg ref="followerStatusPopulator" /> 
			</bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    
    <bean id="getGroupFollowers" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.GetFollowingExecution">
                <constructor-arg ref="bulkDomainGroupsByShortNameMapper" /> <!-- wbc -->
                <constructor-arg ref="getFollowerPersonIdsForGroupByIdMapper" />
                <constructor-arg ref="getPersonsByIdsMapper" />
                <constructor-arg ref="followerStatusPopulator" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>    

	<!-- The next two actions use straight DB mappers - they really need some form of caching since they're used directly by the front end. -->
    <bean id="getPersonNewActivityNotificationPreference" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetStreamActivitySubscriptionExecution">
                <constructor-arg ref="getPersonIdByAccountIdMapper" />
                <constructor-arg ref="getPersonActivitySubscriptionDbMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    <bean id="getGroupNewActivityNotificationPreference" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetStreamActivitySubscriptionExecution">
                <constructor-arg ref="getGroupIdByShortNameMapper" />
                <constructor-arg ref="getGroupActivitySubscriptionDbMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
     </bean>

    <bean id="changePersonNewActivityNotificationPreference" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.ChangeStreamActivitySubscriptionExecution">
                <constructor-arg ref="getPersonIdByAccountIdMapper" />
                <constructor-arg ref="changePersonActivitySubscriptionDbMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
     </bean>

    <bean id="changeGroupNewActivityNotificationPreference" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.ChangeStreamActivitySubscriptionExecution">
                <constructor-arg ref="getGroupIdByShortNameMapper" />
                <constructor-arg ref="changeGroupActivitySubscriptionDbMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
     </bean>

     <bean id="getUserGroupActivitySubscriptions" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.ExecuteDomainMapperExecution">
                <constructor-arg ref="usePrincipalPersonIdRequestTransformer" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.GetSubscribedGroupsDbMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getCurrentUserFollowingStatus" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.profile.GetCurrentUserFollowingStatusExecution">
                <constructor-arg ref="bulkPeopleByOpenSocialIdMapper" />
                <constructor-arg ref="openSocialRegEx" />
                <constructor-arg ref="getFollowerPersonIdsForGroupByIdMapper" />
                <constructor-arg ref="getFollowerPersonIdsForPersonByIdMapper" />
                <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                <constructor-arg ref="getPeopleByAccountIdsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getTermsOfService" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.GetTermsOfServiceExecution">
                <constructor-arg ref="findSystemSettings" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getSystemSettings" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.GetSystemSettingsExecution">
                <constructor-arg ref="findSystemSettings" />
                <constructor-arg ref="getSystemAdministrators" />
                <constructor-arg ref="membershipCriteriaDTODbMapper" /> 
                <constructor-arg ref="galleryTabTemplateDTODBMapper" />
                <constructor-arg ref="jpaThemeMapper" /> 
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.ThemeToThemeDTOTransformer" />
                </constructor-arg>              
                <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />                
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="acceptTermsOfService" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.AcceptTermsOfServiceExecution">
                <constructor-arg ref="jpaPersonMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="httpDocumentFetcher" class="org.eurekastreams.server.service.utility.http.HttpDocumentFetcherImpl" />

    <bean id="feedFetcher" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.rome.BasicFeedFetcher">
        <constructor-arg ref="httpDocumentFetcher" />
    </bean>

    <bean id="standardPluginFeedFetcher" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.rome.BasicPluginFeedFetcher">
        <constructor-arg ref="feedFetcher" />
    </bean>

    <bean id="twitterCookieBypassPluginFeedFetcher" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.rome.BasicPluginFeedFetcher">
        <constructor-arg ref="feedFetcher" />
       <constructor-arg value="(www.)?twitter.com"/>
        <constructor-arg>
            <map>
                <entry key="Cookie" value="lmyellow=" />
            </map>
        </constructor-arg>
    </bean>

    <util:list id="feedFetcherStrategies">
        <ref bean="twitterCookieBypassPluginFeedFetcher"/>
    </util:list>

    <bean id="feedFactory" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.rome.FeedFactory">
        <constructor-arg ref="feedFetcherStrategies" />
        <constructor-arg ref="standardPluginFeedFetcher" />
        <constructor-arg value="${eureka.proxy.host}" />
        <constructor-arg value="${eureka.proxy.port}" />
        <constructor-arg type="int" value="${eureka.feeds.httptimeout}" />
    </bean>

    <bean id="getFeedTitle" class="org.eurekastreams.server.action.execution.feed.GetTitleFromFeedExecution">
        <constructor-arg ref="feedFactory" />
    </bean>

    <bean id="insertBufferedActivitiesAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.InsertBufferedActivitiesExecution">
                <constructor-arg ref="addBufferedActivitiesToCache" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="refreshFeedsAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.RefreshFeedsExecution">
                <constructor-arg ref="getRefreshableFeedsMapper" />
                <constructor-arg ref="setRefreshableFeedsAsPendingMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
         <constructor-arg ref="taskHandler-nonui" />
    </bean>

    <bean id="generateDailyUsageSummary" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg ref="generateDailyUsageSummaryExecution" />
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="generateDailyUsageSummaryAction" class="org.eurekastreams.commons.actions.async.TaskHandlerAsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="generateDailyUsageSummaryExecution" />
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <!-- TODO  these next 4 keys couldn't be staged in the ac-mappers.xml for some reason?
-->
    <!-- Standard RSS/ATOM mappers -->
    <bean id="standardFeedBookmarkMapper"
        class="org.eurekastreams.server.service.actions.strategies.activity.plugins.StandardFeedBookmarkMapper" />

    <bean id="standardFeedNoteMapper"
        class="org.eurekastreams.server.service.actions.strategies.activity.plugins.StandardFeedNoteMapper" />

    <!-- specific URL mappers -->
	<util:list id="urlSpecificFeedObjectMappers">
		<bean class="org.eurekastreams.server.service.actions.strategies.activity.plugins.ObjectBuilderForSpecificUrl">
			<constructor-arg value="(www.)?youtube.com" />
			<constructor-arg>
				<bean class="org.eurekastreams.server.service.actions.strategies.activity.plugins.YoutubeMapper" />
			</constructor-arg>
		</bean>
		<bean class="org.eurekastreams.server.service.actions.strategies.activity.plugins.ObjectBuilderForSpecificUrl">
			<constructor-arg value="(www.)?flickr.com" />
			<constructor-arg>
				<bean class="org.eurekastreams.server.service.actions.strategies.activity.plugins.FlickrMapper" />
			</constructor-arg>
		</bean>
	</util:list>

    <bean id="refreshFeedAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.RefreshFeedExecution">
                <constructor-arg>
                    <map>
                        <entry key="NOTE" value-ref="standardFeedNoteMapper" />
                        <entry key="BOOKMARK" value-ref="standardFeedBookmarkMapper" />
                    </map>
                </constructor-arg>
                <constructor-arg ref="urlSpecificFeedObjectMappers" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
                <constructor-arg ref="memcachedCache" />
                <constructor-arg ref="feedFactory"/>
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg>
                        <ref bean="gadgetMetaDataHttpFetcher" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
                </constructor-arg>
                <constructor-arg>
                    <list>
                        <value>www.google.com/reader/public/atom/</value>
                    </list>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>



    <bean id="getPersonIdForFeedSub" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.GetPersonIdForFeedSubscription">
        <constructor-arg ref="getPersonIdByAccountIdMapper" />
    </bean>

    <bean id="deletePluginForUser" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.DeleteFeedSubscriberExecution">
                <constructor-arg ref="deleteFeedSubscriberByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="persistPluginForUser" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.AddFeedToEntityExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
                </constructor-arg>
                <constructor-arg ref="getFeedByUrlOrCreateMapper" />
                <constructor-arg ref="getPersonIdForFeedSub" />
                <constructor-arg ref="getFeedSubscriberOrCreateMapper" />
                <constructor-arg ref="getFeedTitle" />
                <constructor-arg ref="deletePluginForUser" />
                <constructor-arg value="PERSON" />
                <constructor-arg ref="postPersonActivityExecutionStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="deletePluginForGroup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.DeleteFeedSubscriberExecution">
                <constructor-arg ref="deleteFeedSubscriberByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="getGroupIdForFeedSub" class="org.eurekastreams.server.service.actions.strategies.activity.plugins.GetGroupIdForFeedSubscription">
        <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
    </bean>

    <bean id="getFeedTitleAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg ref="getFeedTitle" />
        <constructor-arg value="true" />
    </bean>

    <bean id="persistPluginForGroup" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.AddFeedToEntityExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
                </constructor-arg>
                <constructor-arg ref="getFeedByUrlOrCreateMapper" />
                <constructor-arg ref="getGroupIdForFeedSub" />
                <constructor-arg ref="getFeedSubscriberOrCreateMapper" />
                <constructor-arg ref="getFeedTitle" />
                <constructor-arg ref="deletePluginForGroup" />
                <constructor-arg value="GROUP" />
                <constructor-arg ref="postGroupActivityExecutionStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="getPluginsAndSubscriptionsForUser" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.GetPluginsAndSubscriptionsForTabExecution">
                    <constructor-arg ref="getAllPluginsMapper" />
                    <constructor-arg ref="getFeedSubscriptionsByEntity" />
                    <constructor-arg ref="getPersonIdForFeedSub" />
                    <constructor-arg value="PERSON" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getPluginsAndSubscriptionsForGroup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.feed.GetPluginsAndSubscriptionsForTabExecution">
                    <constructor-arg ref="getAllPluginsMapper" />
                    <constructor-arg ref="getFeedSubscriptionsByEntity" />
                    <constructor-arg ref="getGroupIdForFeedSub" />
                    <constructor-arg value="GROUP" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getPersonModelView" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.ExecuteDomainMapperExecution">
            	<constructor-arg ref="passThruRequestTransformer" />
                <constructor-arg ref="getPersonByAccountIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getPersonModelViewForStartup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetCurrentPersonModelViewForStartupExecution">
                <constructor-arg ref="getSystemAdministratorIds" />
                <constructor-arg ref="getPersonByAccountIdMapper" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.service.security.userdetails.TermsOfServiceAcceptanceStrategyImpl">
                        <constructor-arg ref="findSystemSettings"/>
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>


    <bean id="getBulkEntities" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetBulkEntitiesExecution">
                <constructor-arg ref="getPeopleByAccountIdsMapper" />
                <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="personLookup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.PersonLookupExecution">
                <constructor-arg>
                    <bean
                        class="org.eurekastreams.server.action.execution.PersonLookupUtilityStrategy">
                        <constructor-arg ref="personLookupStrategy" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="groupLookup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.VerifyLdapGroupExecution">
                <constructor-arg ref="findLdapGroupByCnNameMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="personLookupOrg" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.PersonLookupExecution">
                <constructor-arg>
                    <bean
                        class="org.eurekastreams.server.action.execution.PersonLookupUtilityStrategy">
                        <constructor-arg ref="ldapPersonLookupViaAttributeQuery" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="personLookupOrgGroup" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.PersonLookupExecution">
                <constructor-arg>
                    <bean
                        class="org.eurekastreams.server.action.execution.PersonLookupUtilityStrategy">
                        <constructor-arg ref="ldapPersonLookupViaLdapGroupMembership" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="securityTrimmer"
            class="org.eurekastreams.server.action.execution.stream.ActivitySecurityTrimmer">
            <constructor-arg ref="bulkActivitySecurityMapper" />
            <constructor-arg
                    ref="getPrivateCoordinatedAndFollowedGroupIdsForUserMapper" />
    </bean>

    <bean id="getActivityIdsByJsonRequest" class="org.eurekastreams.server.action.execution.stream.GetActivityIdsByJson">
            <constructor-arg>
                <bean class="org.eurekastreams.server.service.actions.strategies.activity.datasources.PersistenceDataSource">
                    <constructor-arg>
                    	<!-- Mapper to get the everyone activity id list -->


		 				<bean class="org.eurekastreams.server.persistence.mappers.chained.DecoratedPartialResponseDomainMapper">
							<constructor-arg>
								<!--
									Wrap the cache mapper with a partial mapper wrapper
								-->
								<bean class="org.eurekastreams.server.persistence.mappers.chained.PartialMapperWrapper">
									<constructor-arg>
										<bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheMapper">
											<!-- Cache Key Prefix -->
											<constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.EVERYONE_ACTIVITY_IDS" />

											<!-- Transformer to return an empty string as suffix -->
											<constructor-arg>
												<bean class="org.eurekastreams.server.persistence.mappers.cache.IgnoredCacheKeySuffixTransformer" />
											</constructor-arg>

											<property name="cache" ref="memcachedCache" />
										</bean>
									</constructor-arg>
								</bean>
							</constructor-arg>

							<!-- Database mapper to fall back on if not found in cache -->
							<constructor-arg ref="getEveryoneActivityDbMapper" />

							<constructor-arg ref="nonNullResultsCombiner" />

							<constructor-arg>
								<!-- Cache refresher - sets the list back to the everyone cache list -->
								<bean class="org.eurekastreams.server.persistence.mappers.cache.SingleListValueCacheRefreshStrategy">
									<constructor-arg ref="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.EVERYONE_ACTIVITY_IDS" />
									<constructor-arg>
										<bean class="org.eurekastreams.server.persistence.mappers.cache.IgnoredCacheKeySuffixTransformer" />
									</constructor-arg>
									<property name="cache" ref="memcachedCache" />
								</bean>
							</constructor-arg>
						</bean>


                   </constructor-arg>

                    <constructor-arg>
                        <map>
                            <entry key="followedBy">
                                <ref bean="getAllFollowedByActivityIds" />                            
                            </entry>
                            <entry key="recipient">
                                <ref bean="bulkActivityStreamsMapper" />
                            </entry>
                            <entry key="joinedGroups">
                                <ref bean="bulkActivityStreamsMapper" />
                            </entry>
                            <entry key="savedBy">
                                <ref bean="getStarredActivityIds" />
                            </entry>
                            <entry key="likedBy">
                                <ref bean="getLikedActivityIdsByUserId" />
                            </entry>
                        </map>
                    </constructor-arg>
                     <constructor-arg>
                        <map>
                            <entry key="followedBy">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.AllFollowedByPersistenceRequestTransformer">
                                    <constructor-arg ref="getPersonIdByAccountIdMapper" />
                                    <constructor-arg ref="getFollowedGroupIdsForPersonByIdMapper" />
                                    <constructor-arg ref="getGroupsByIdsMapper" />
                                </bean>
                            </entry>
                            <entry key="recipient">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.RecipientPersistenceRequestTransformer">
                                    <constructor-arg ref="getPeopleByAccountIdsMapper" />
                                    <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                                    <constructor-arg ref="getStreamScopeForResourceScopeTypeByUniqueKey" />
                                </bean>
                            </entry>
                            <entry key="savedBy">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.SingleUserPersistenceRequestTransformer">
                                    <constructor-arg ref="getPersonIdByAccountIdMapper" />
                                    <constructor-arg value="savedBy" />
                                    <constructor-arg value="false" />
                                    <constructor-arg value="true" />
                                </bean>
                            </entry>
                            <entry key="joinedGroups">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.FollowedGroupsPersistenceRequestTransformer">
                                    <constructor-arg ref="getPersonIdByAccountIdMapper" />
                                    <constructor-arg ref="getFollowedGroupIdsForPersonByIdMapper" />
                                    <constructor-arg ref="getGroupsByIdsMapper" />
                                </bean>
                            </entry>
                            <entry key="likedBy">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.activity.datasources.MultiUserPersistenceRequestTransformer">
                                    <constructor-arg ref="getPeopleIdsByAccountIdsMapper" />
                                    <constructor-arg value="likedBy" />
                                </bean>
                            </entry>
                        </map>
                    </constructor-arg>
                    <constructor-arg>
                        <bean
                            class="org.eurekastreams.server.service.actions.strategies.activity.OrSortedListCollider" />
                    </constructor-arg>
                </bean>
            </constructor-arg>
            <constructor-arg ref="luceneActivityDataSource" />
            <constructor-arg>
                <bean
                    class="org.eurekastreams.server.service.actions.strategies.activity.InterpolationListCollider" />
            </constructor-arg>
            <constructor-arg>
            	<list>
            		<bean class="org.eurekastreams.server.action.execution.stream.ExcludeItemsTrimmerFactory" />
            		<ref bean="securityTrimmer" />
            	</list>
            </constructor-arg>
            <constructor-arg ref="getPersonsByIdsMapper" />
            <constructor-arg value="%%CURRENT_USER_ACCOUNT_ID%%" />
    </bean>

    <bean id="getActivitiesByRequestExecutor"
            class="org.eurekastreams.server.action.execution.stream.GetActivitiesByRequestExecution">
            <constructor-arg ref="bulkActivitiesMapper" />
            <constructor-arg>
                <list>
                    <ref bean="canCommentFilter" />
                    <ref bean="canShareFilter" />
                    <ref bean="deleteFilter" />                    
                    <ref bean="likeFilter" />
                    <ref bean="savedFilter" />
                    <ref bean="authorLockedFilter" />
                    <ref bean="commentAuthorLockedFilter" />
                    <ref bean="serverTimeFilter" />
                </list>
            </constructor-arg>
            <constructor-arg ref="getPersonByAccountIdMapper" />
            <constructor-arg ref="getActivityIdsByJsonRequest" />
    </bean>

    <bean id="getActivityIDs" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetActivityIDs">
                    <constructor-arg ref="getActivityIdsByJsonRequest" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="postActivityValidationStrategy"
        class="org.eurekastreams.server.action.validation.stream.PostActivityValidationStrategy">
        <constructor-arg ref="verbValidators" />
        <constructor-arg ref="objectValidators" />
    </bean>

    <bean id="postActivityAuthorizationStrategy"
        class="org.eurekastreams.server.action.authorization.stream.PostActivityAuthorizationStrategy">
        <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
        <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
        <constructor-arg ref="getFollowerPersonIdsForGroupByIdMapper" />
        <constructor-arg ref="getPersonByAccountIdMapper" />
    </bean>

    <bean id="postGroupActivityExecutionStrategy"
        class="org.eurekastreams.server.action.execution.stream.PostActivityExecutionStrategy">
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
        </constructor-arg>
        <constructor-arg ref="insertActivityComment" />
        <constructor-arg ref="bulkActivitiesMapper" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.service.actions.strategies.GroupRecipientRetriever">
                <constructor-arg ref="jpaGroupMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="postActivityUpdateStreamsByActorMapper" />
        <constructor-arg ref="findOrInsertSharedResourceByUniqueKeyMapper" />
        <constructor-arg ref="memcachedCache" />
        <constructor-arg ref="getPersonByAccountIdMapper" />
        <constructor-arg>
            <list>
                <ref bean="canCommentFilter" />
                <ref bean="canShareFilter" />
                <ref bean="deleteFilter" />                    
                <ref bean="likeFilter" />
                <ref bean="savedFilter" />
                <ref bean="authorLockedFilter" />
                <ref bean="commentAuthorLockedFilter" />
                <ref bean="serverTimeFilter" />
            </list>
        </constructor-arg>
        <constructor-arg ref="sharedResourceUniqueKeyToCacheKeySuffixTransformer" />
    </bean>

    <bean id="postPersonActivityExecutionStrategy"
        class="org.eurekastreams.server.action.execution.stream.PostActivityExecutionStrategy">
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
        </constructor-arg>
        <constructor-arg ref="insertActivityComment" />
        <constructor-arg ref="bulkActivitiesMapper" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.service.actions.strategies.PersonRecipientRetriever">
                <constructor-arg ref="jpaPersonMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="postActivityUpdateStreamsByActorMapper" />
        <constructor-arg ref="findOrInsertSharedResourceByUniqueKeyMapper" />
        <constructor-arg ref="memcachedCache" />
        <constructor-arg ref="getPersonByAccountIdMapper" />
        <constructor-arg>
            <list>
                <ref bean="canCommentFilter" />
                <ref bean="canShareFilter" />
                <ref bean="deleteFilter" />                    
                <ref bean="likeFilter" />
                <ref bean="savedFilter" />
                <ref bean="authorLockedFilter" />
                <ref bean="commentAuthorLockedFilter" />
                <ref bean="serverTimeFilter" />
            </list>
        </constructor-arg>
        <constructor-arg ref="sharedResourceUniqueKeyToCacheKeySuffixTransformer" />
    </bean>

    <bean id="postResourceActivityExecutionStrategy"
        class="org.eurekastreams.server.action.execution.stream.PostActivityExecutionStrategy">
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
        </constructor-arg>
        <constructor-arg ref="insertActivityComment" />
        <constructor-arg ref="bulkActivitiesMapper" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.service.actions.strategies.ResourceRecipientRetriever">
                <constructor-arg ref="findOrInsertSharedResourceByUniqueKeyMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="postActivityUpdateStreamsByActorMapper" />
        <constructor-arg ref="findOrInsertSharedResourceByUniqueKeyMapper" />
        <constructor-arg ref="memcachedCache" />
        <constructor-arg ref="getPersonByAccountIdMapper" />
        <constructor-arg>
            <list>
                <ref bean="canCommentFilter" />
                <ref bean="canShareFilter" />
                <ref bean="deleteFilter" />                    
                <ref bean="likeFilter" />
                <ref bean="savedFilter" />
                <ref bean="authorLockedFilter" />
                <ref bean="commentAuthorLockedFilter" />
                <ref bean="serverTimeFilter" />
            </list>
        </constructor-arg>
        <constructor-arg ref="sharedResourceUniqueKeyToCacheKeySuffixTransformer" />
    </bean>

    <bean id="sendGroupAccessRequestAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.SendGroupAccessRequestExecution">
                <constructor-arg ref="jpaGroupMapper" />
                <constructor-arg ref="insertRequestForGroupMembershipMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="getRequestsForGroupMembershipByGroupAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="groupCoordinatorAuthorization" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.GetRequestsForGroupMembershipByGroupExecution">
                <constructor-arg ref="getRequestsForGroupMembershipMapper" />
                <constructor-arg ref="getPersonsByIdsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="deleteRequestForGroupMembershipAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="groupCoordinatorAuthorization" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.DeleteRequestForGroupMembershipExecution">
                <constructor-arg ref="deleteRequestForGroupMembershipMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="getPendingGroupsAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.profile.GetPendingGroupsExecutionStrategy">
                <constructor-arg ref="getPendingDomainGroupsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="reviewPendingGroupsAction" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.profile.ReviewPendingGroupExecution">
                <constructor-arg ref="jpaGroupMapper" />
                <constructor-arg ref="addPrivateGroupIdToCachedCoordinatorAccessList" />
                <constructor-arg ref="deleteGroupExecution" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="postPersonActivityServiceActionTaskHandler"
        class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="postActivityValidationStrategy" />
        <constructor-arg ref="postActivityAuthorizationStrategy" />
        <constructor-arg ref="postPersonActivityExecutionStrategy" />
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="postGroupActivityServiceActionTaskHandler"
        class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="postActivityValidationStrategy" />
        <constructor-arg ref="postActivityAuthorizationStrategy" />
        <constructor-arg ref="postGroupActivityExecutionStrategy" />
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="postResourceActivityServiceActionTaskHandler"
        class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="postActivityValidationStrategy" />
        <constructor-arg ref="postActivityAuthorizationStrategy" />
        <constructor-arg ref="postResourceActivityExecutionStrategy" />
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="postActivityAsyncExecutionStrategy"
        class="org.eurekastreams.server.action.execution.stream.PostActivityAsyncExecutionStrategy">
        <constructor-arg ref="postCachedActivity" />
        <constructor-arg ref="findByIdMapper" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.StoreStreamHashTagsForActivityStrategyImpl">
                <constructor-arg ref="hashTagExtractor" />
                <constructor-arg ref="activityContentExtractor" />
                <constructor-arg ref="getHashTagsFromDatabaseMapper" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="postActivityAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="postActivityAsyncExecutionStrategy" />
        <constructor-arg value="false" />
    </bean>

    <bean id="noExecutionStrategy" class="org.eurekastreams.commons.actions.NoExecutionStrategy">
    </bean>

    <bean id="noAuthorizationStrategy"
        class="org.eurekastreams.commons.actions.NoAuthorizationStrategy">
    </bean>

    <bean id="noValidationStrategy" class="org.eurekastreams.commons.actions.NoValidationStrategy">
    </bean>

    <bean id="warmCache" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="isSystemAdminAuthorization" />
        <!-- Execution -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.QueueAsynchActionExecution">
                <constructor-arg value="initializeCache" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />
    </bean>

    <bean id="warmCache_people" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="isSystemAdminAuthorization" />
        <!-- Execution -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.QueueAsynchActionExecution">
                <constructor-arg value="queuePersonCacheWarmingTasks" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />
    </bean>

    <bean id="warmCache_groups" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="isSystemAdminAuthorization" />
        <!-- Execution -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.QueueAsynchActionExecution">
                <constructor-arg value="queueGroupCacheWarmingTasks" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />
    </bean>

    <bean id="warmCache_themes" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="isSystemAdminAuthorization" />
        <!-- Execution -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.QueueAsynchActionExecution">
                <constructor-arg value="queueThemeCacheWarmingTasks" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />
    </bean>

    <bean id="reindexEntities" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.AsyncActionSchedulerExecution">
                <constructor-arg value="reindexEntitiesAsync" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="true" />
    </bean>

    <bean id="reindexEntitiesAsync"
        class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.ReindexEntitiesExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.commons.search.bootstrap.EntityReindexer">
                        <property name="entitiesToReindex">
                            <list>
                                <value>org.eurekastreams.server.domain.DomainGroup</value>
                                <value>org.eurekastreams.server.domain.Person</value>
                                <value>org.eurekastreams.server.domain.stream.Activity</value>
                            </list>
                        </property>
                        <property name="searchIndexManager">
                            <bean
                                class="org.eurekastreams.commons.search.bootstrap.SearchIndexManager">
                                <!-- Fetch Batch Size - the number of records to fetch per loop -->
                                <constructor-arg value="50" />
                                <!--
                                    Flush Batch Size - the number of records to process before
                                    committing to search index
                                -->
                                <constructor-arg value="50" />
                            </bean>
                        </property>
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true"/>
    </bean>

    <bean id="getDirectorySearchResultsPeople" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.directory.GetDirectorySearchResultsExecution">
                <constructor-arg ref="directorySearchLuceneQueryBuilderForPeople" />
                <constructor-arg ref="personSearchRequestBuilder" />
                <constructor-arg ref="searchResultAdditionalPropertyPopulator" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getDirectorySearchResultsGroups" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.directory.GetDirectorySearchResultsExecution">
                <constructor-arg ref="directorySearchLuceneQueryBuilderForGroups" />
                <constructor-arg ref="groupSearchRequestBuilder" />
                <constructor-arg ref="searchResultAdditionalPropertyPopulator" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getDirectorySearchResults" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.directory.GetDirectorySearchResultsExecution">
                <constructor-arg ref="directorySearchLuceneQueryBuilderForPeopleGroups" />
                <constructor-arg ref="groupPersonSearchRequestBuilder" />
                <constructor-arg ref="searchResultAdditionalPropertyPopulator" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getGadgetGalleryItemCategories" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemCategoriesExecution">
                <constructor-arg>
                    <ref bean="jpaGalleryItemCategoryMapper" />
                </constructor-arg>
                <constructor-arg value="GADGET" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getPluginGalleryItemCategories" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemCategoriesExecution">
                <constructor-arg>
                    <ref bean="jpaGalleryItemCategoryMapper" />
                </constructor-arg>
                <constructor-arg value="PLUGIN" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getThemeGalleryItemCategories" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemCategoriesExecution">
                <constructor-arg>
                    <ref bean="jpaGalleryItemCategoryMapper" />
                </constructor-arg>
                <constructor-arg value="THEME" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getGalleryTabTemplateGalleryItemCategories" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemCategoriesExecution">
                <constructor-arg>
                    <ref bean="jpaGalleryItemCategoryMapper" />
                </constructor-arg>
                <constructor-arg value="TAB" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getSortedGadgetGalleryItems" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.gallery.GetGalleryItemsValidation" />
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemsExecution">
                <constructor-arg>
                    <ref bean="jpaGadgetDefinitionMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getSortedPluginGalleryItems" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.gallery.GetGalleryItemsValidation" />
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemsExecution">
                <constructor-arg>
                    <ref bean="jpaPluginDefinitionMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getSortedThemeGalleryItems" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.gallery.GetGalleryItemsValidation" />
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemsExecution">
                <constructor-arg>
                    <ref bean="jpaThemeMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getGadgetUserPrefById" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.GetGadgetUserPrefByIdExecutionStrategy">
                <constructor-arg ref="gadgetUserPrefMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getGallerySearchResults" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.GetGallerySearchResultsExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.LuceneSearchMapper">
                        <property name="queryOptimizer" ref="queryOptimizer" />
                        <property name="queryBuilder">
                            <bean id="textQueryParserBuilder" class="org.eurekastreams.commons.search.QueryParserBuilder"
						        scope="prototype">
						        <constructor-arg value="nothing" />
						        <constructor-arg>
						            <bean class="org.eurekastreams.commons.search.analysis.TextStemmerAnalyzer" />
						        </constructor-arg>
						        <constructor-arg value="OR"/>
						    </bean>
                        </property>
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getAppData" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg ref="getAppDataDTO" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getPeopleByOpenSocialIds" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.opensocial.GetPeopleByOpenSocialIdsValidation" />
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.GetPeopleByOpenSocialIdsExecution">
                <constructor-arg ref="bulkPeopleByOpenSocialIdMapper" />
                <constructor-arg ref="getPeopleByAccountIdsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getUserActivities" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.GetUserActivitiesExecution">
                <constructor-arg ref="bulkActivitiesMapper" />
                <constructor-arg ref="bulkPeopleByOpenSocialIdMapper" />
                <constructor-arg ref="getActivitiesByRequestExecutor" />
                <!-- Max number of activities to get from open social ids -->
                <constructor-arg value="1000" />
                <constructor-arg ref="securityTrimmer" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="headerConnectionFacadeDecorator"
        class="org.eurekastreams.server.service.actions.strategies.links.HeadersConnectionFacadeDecorator">
        <constructor-arg>
            <util:map>
                <entry key="User-Agent" value="Mozilla/4.76" />
            </util:map>
        </constructor-arg>
    </bean>

    <util:list id="connectionFacadeDecorators">
        <ref bean="headerConnectionFacadeDecorator"/>
    </util:list>

    <bean id="connectionFacade"
        class="org.eurekastreams.server.service.actions.strategies.links.ConnectionFacade">
        <constructor-arg ref="connectionFacadeDecorators" />
        <property name="connectionTimeOut" value="6000" />
        <property name="proxyHost" value="${eureka.proxy.host}" />
        <property name="proxyPort" value="${eureka.proxy.port}" />
        <property name="redirectCodes">
            <list>
                <bean class="java.lang.Integer">
                    <constructor-arg value="301" />
                </bean>
                <bean class="java.lang.Integer">
                    <constructor-arg value="302" />
                </bean>
                <bean class="java.lang.Integer">
                    <constructor-arg value="303" />
                </bean>
                <bean class="java.lang.Integer">
                    <constructor-arg value="307" />
                </bean>
            </list>
        </property>
        <property name="expectedDownloadFileLimit" value="65536" />
        <property name="maximumDownloadFileLimit" value="10485760" />
    </bean>

    <bean id="getParsedLinkInformation" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetParsedLinkInformationExecution">
                <constructor-arg ref="connectionFacade" />
                <constructor-arg ref="findLinkInformationByUrlMapper" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
                <constructor-arg>
                    <list>
                        <bean
                            class="org.eurekastreams.server.service.actions.strategies.links.HtmlLinkParser">
                            <property name="regex" value="(www.)?youtube.com" />
                            <property name="imageParser">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.links.YoutubeVideoThumbnailParser" />
                            </property>
                            <property name="titleParser">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.links.HtmlLinkTitleParser">
                                    <constructor-arg value="128" />
                                </bean>
                            </property>
                            <property name="descriptionParser">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.links.MetaDescriptionParser">
                                    <constructor-arg value="255" />
                                </bean>
                            </property>
                        </bean>
                        <bean
                            class="org.eurekastreams.server.service.actions.strategies.links.HtmlLinkParser">
                            <property name="regex" value=".*" />
                            <property name="imageParser">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.links.BasicLinkImageParser">
                                    <constructor-arg ref="connectionFacade" />
                                    <constructor-arg value="10" />
                                    <constructor-arg value="3000" />
                                </bean>
                            </property>
                            <property name="titleParser">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.links.HtmlLinkTitleParser">
                                    <constructor-arg value="128" />
                                </bean>
                            </property>
                            <property name="descriptionParser">
                                <bean
                                    class="org.eurekastreams.server.service.actions.strategies.links.MetaDescriptionParser">
                                    <constructor-arg value="255" />
                                </bean>
                            </property>
                        </bean>
                    </list>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="viewActivityAuthorization" class="org.eurekastreams.server.action.authorization.stream.ViewActivityAuthorizationStrategy">
       <constructor-arg ref="securityTrimmer" />
    </bean>

    <bean id="getActivityById" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- Action's parameter: ActivityID -->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="viewActivityAuthorization" />
        <constructor-arg>
            <!-- Execution Strategy -->
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetActivityByIdExecutionStrategy">
                <constructor-arg ref="bulkActivitiesMapper" />
                <constructor-arg ref="getOrderedCommentIdsByActivityIdMapper" />
                <constructor-arg ref="getCommentsById" />
                <constructor-arg ref="commentDeletePropertyStrategy" />
                <constructor-arg ref="getPersonByAccountIdMapper" />
                <constructor-arg>
                    <list>
                        <ref bean="canCommentFilter" />
                        <ref bean="canShareFilter" />
                        <ref bean="likeFilter" />
                        <ref bean="deleteFilter" />
                        <ref bean="savedFilter" />
                        <ref bean="authorLockedFilter" />
                        <ref bean="commentAuthorLockedFilter" />
                        <ref bean="serverTimeFilter" />
                    </list>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getCurrentUserFollowedGroups" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetCurrentUserFollowedGroupsExecution">
                <constructor-arg ref="getFollowedGroupIdsForPersonByIdMapper" />
                <constructor-arg ref="getGroupsByIdsMapper" />
                <constructor-arg ref="getPersonsByIdsMapper" />
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getFlaggedActivities" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetFlaggedActivitiesExecution">
                    <constructor-arg ref="getFlaggedActivitiesMapper" />
                    <constructor-arg ref="getPersonByAccountIdMapper" />
                    <constructor-arg ref="deleteFilter" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="flagActivity" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Action's parameter: ActivityID -->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="viewActivityAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.UpdateActivityFlagExecution">
                    <constructor-arg ref="updateActivityFlagMapper" />
                    <constructor-arg value="true" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="unflagActivity" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Action's parameter: ActivityID -->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.UpdateActivityFlagExecution">
                    <constructor-arg ref="updateActivityFlagMapper" />
                    <constructor-arg value="false" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="setTabLayout" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.start.SetTabLayoutAuthorization">
                <constructor-arg ref="tabPermission" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.start.SetTabLayoutExecution">
                <constructor-arg ref="jpaTabMapper" />
                <constructor-arg ref="updateGadgetsWithNewTabLayoutMapper" />
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteGadget" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.authorization.start.DeleteGadgetAuthorization">
                <constructor-arg>
                    <ref bean="jpaTabMapper" />
                </constructor-arg>
                <constructor-arg>
                    <ref bean="tabPermission" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.DeleteGadgetExecution">
                <constructor-arg>
                    <ref bean="jpaTabMapper" />
                </constructor-arg>
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="updateGadgetDefinitionCountAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <!-- Quartz job -->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.UpdateGadgetDefinitionCountExecution">
                <constructor-arg ref="jpaGadgetDefinitionMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteTab" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.start.DeleteTabValidation">
                <constructor-arg>
                    <ref bean="getPersonPagePropertiesById" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.authorization.start.DeleteTabAuthorization">
                <constructor-arg>
                    <ref bean="tabPermission" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.DeleteTabExecution">
                <constructor-arg>
                    <ref bean="jpaPortalPageMapper" />
                </constructor-arg>
                <constructor-arg>
                    <ref bean="jpaTabMapper" />
                </constructor-arg>
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="setTabOrder" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.start.SetTabOrderExecution">
                <constructor-arg ref="jpaPersonMapper"/>
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="setGadgetState" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.SetGadgetStateExecution">
                <constructor-arg>
                    <ref bean="jpaGadgetMapper" />
                </constructor-arg>
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteStreamForCurrentUser" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.authorization.stream.ModifyStreamForCurrentUserAuthorization">
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="passThruRequestTransformer" />
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.DeleteStreamForCurrentUserExecution">
                <constructor-arg ref="deleteStreamDbMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="modifyStreamForCurrentUser" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.stream.ModifyStreamForCurrentUserValidation" />
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.authorization.stream.ModifyStreamForCurrentUserAuthorization">
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.GetIdFromStreamRequestTransformer" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.ModifyStreamForCurrentUserExecution">
                <constructor-arg>
                    <ref bean="findByIdMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>
    
    <bean id="insertStreamBookmark" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.InsertStreamBookmarkExecution">
                <constructor-arg>
                    <ref bean="findByIdMapper" />
                </constructor-arg>
                <constructor-arg>
                    <ref bean="findByIdMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="insertBlockedSuggestion" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.InsertStreamBlockedSuggestionExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>
    
    <bean id="deleteStreamBookmark" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.DeleteCurrentUserBookmarkExecution">
                <constructor-arg>
                    <ref bean="findByIdMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>
    

    <bean id="undeleteGadget" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.start.UndeleteGadgetExecution">
                <constructor-arg>
                    <ref bean="jpaTabMapper" />
                </constructor-arg>
                <constructor-arg ref="deleteCacheKeys"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="setActivityStar" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.SetActivityStarExecution">
                <constructor-arg ref="insertStarredActivity" />
                <constructor-arg ref="deleteStarredActivity" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="setSharedResourceLiked" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.SetSharedResourceLikeExecution">
                <constructor-arg ref="setLikedSharedResourceStatusDbMapper" />
                <constructor-arg ref="findOrInsertSharedResourceByUniqueKeyMapper" />
                <constructor-arg ref="memcachedCache" />
                <constructor-arg ref="sharedResourceUniqueKeyToCacheKeySuffixTransformer" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="taskHandler" />
        <constructor-arg value="false" />
    </bean>

    <bean id="setActivityLiked" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.SetActivityLikeExecution">
                <constructor-arg ref="insertLikedActivity" />
                <constructor-arg ref="deleteLikedActivity" />
                <constructor-arg ref="indexEntity" />
                <constructor-arg ref="findByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="getActivityLikers" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetPeopleWhoLikedItemExecution">
                <constructor-arg ref="getPeopleWhoLikedActivity" />
                <constructor-arg ref="getPersonsByIdsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="getResourceLikers" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.stream.GetPeopleWhoLikedItemExecution">
                <constructor-arg ref="getPeopleWhoLikedResource" />
                <constructor-arg ref="getPersonsByIdsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="personActivityAvatarUpdaterAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <!-- Update the author avatar ids in cached activities, comments, and embedded comments authored by a user
-->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.PersonAuthoredActivitiesAndCommentsCacheUpdater">
                <!-- Update the author information on all cached activities and comments for a user
-->

                <constructor-arg ref="getActivityIdsAuthoredByOrOriginallyAuthoredByEntityDBMapper" />
                <constructor-arg ref="getActivityCommentIdsAuthoredByPersonIdDBMapper" />
                <constructor-arg ref="getActivityIdsWithFirstOrLastCommentsAuthoredByPersonIdDBMapper" />

                <constructor-arg>
                    <!-- Update the author's avatar in all cached activities authored by a user
-->
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInCachedActivities">
                        <constructor-arg value="100" />

                        <!-- Actions to perform on each activity's author stream entity dtos -->
                        <constructor-arg>
                            <list>
                                <!-- Update the author and original author avatar ids for activities -->
                                <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateStreamEntityDTOAvatarId" />
                            </list>
                        </constructor-arg>

                        <property name="cache" ref="memcachedCache" />
                    </bean>
                </constructor-arg>

                <constructor-arg>
                    <!-- Update the author's avatar in all cached comments authored by a user
-->
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInCachedComments">
                        <constructor-arg value="100" />

                        <!-- Actions to perform on each comment -->
                        <constructor-arg>
                            <list>
                                <!-- Update the author avatar id on the cached comments -->
                                <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateCommentDTOAuthorAvatarId" />
                            </list>
                        </constructor-arg>
                        <property name="cache" ref="memcachedCache" />
                    </bean>
                </constructor-arg>

                <constructor-arg>
                    <!-- Update the author's avatar in all first and last comments embedded in activities
-->
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInActivityEmbeddedCachedComments">
                        <constructor-arg value="100" />

                        <!-- Actions to perform on each comment -->
                        <constructor-arg>
                            <list>
                                <!-- Update the author avatar id on the first and last embedded comments in activities
-->
                                <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateCommentDTOAuthorAvatarId" />
                            </list>
                        </constructor-arg>

                        <property name="cache" ref="memcachedCache" />
                    </bean>
                </constructor-arg>


                <constructor-arg ref="jpaPersonMapper" />
            </bean>

        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="personDisplayNameUpdaterAsyncAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <!-- Update the author display name in cached activities, comments, and embedded comments authored by a user
-->
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.PersonAuthoredActivitiesAndCommentsCacheUpdater">
                <!-- Update the author information on all cached activities and comments for a user
-->

                <constructor-arg ref="getActivityIdsAuthoredByOrOriginallyAuthoredByEntityDBMapper" />
                <constructor-arg ref="getActivityCommentIdsAuthoredByPersonIdDBMapper" />
                <constructor-arg ref="getActivityIdsWithFirstOrLastCommentsAuthoredByPersonIdDBMapper" />

                <constructor-arg>
                    <!-- Update the author's display name in all cached activities authored by a user
-->
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInCachedActivities">
                        <constructor-arg value="100" />

                        <!-- Actions to perform on each activity's author stream entity dtos -->
                        <constructor-arg>
                            <list>
                                <!-- Update the author and original author display names for activities
-->
                                <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateStreamEntityDTODisplayName" />
                            </list>
                        </constructor-arg>

                        <property name="cache" ref="memcachedCache" />
                    </bean>
                </constructor-arg>

                <constructor-arg>
                    <!-- Update the author's display name in all cached comments authored by a user
-->
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInCachedComments">
                        <constructor-arg value="100" />

                        <!-- Actions to perform on each comment -->
                        <constructor-arg>
                            <list>
                                <!-- Update the author display name on the cached comments -->
                                <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateCommentDTOAuthorDisplayName" />
                            </list>
                        </constructor-arg>
                        <property name="cache" ref="memcachedCache" />
                    </bean>
                </constructor-arg>

                <constructor-arg>
                    <!-- Update the author's display name in all first and last comments embedded in activities
-->
                    <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateAuthorInfoInActivityEmbeddedCachedComments">
                        <constructor-arg value="100" />

                        <!-- Actions to perform on each comment -->
                        <constructor-arg>
                            <list>
                                <!-- Update the author display name on the first and last embedded comments in activities
-->
                                <bean class="org.eurekastreams.server.persistence.mappers.cache.UpdateCommentDTOAuthorDisplayName" />
                            </list>
                        </constructor-arg>

                        <property name="cache" ref="memcachedCache" />
                    </bean>
                </constructor-arg>


                <constructor-arg ref="jpaPersonMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <!-- This is called out separately because it is used in both the SetFollowing action as well as the GroupCreator action.
-->
    <bean id="setFollowingGroupStatusExecution" class="org.eurekastreams.server.action.execution.profile.SetFollowingGroupStatusExecution">
        <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
        <constructor-arg ref="getPersonByIdMapper" />
        <constructor-arg ref="getPersonIdByAccountIdMapper" />
        <constructor-arg ref="jpaGroupMapper" />
        <constructor-arg ref="addCachedGroupFollower" />
        <constructor-arg ref="getFollowerPersonIdsForGroupByIdMapper" />
        <constructor-arg ref="deleteRequestForGroupMembershipMapper" />
        <constructor-arg ref="postPersonActivityExecutionStrategy" />
        <constructor-arg ref="deleteCacheKeys" />
    </bean>

    <bean id="setFollowingStatusGroupTaskHandler" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.profile.SetFollowingStatusBaseValidation">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.validation.profile.SetFollowingGroupStatusValidation">
                        <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.profile.SetFollowingGroupStatusAuthorization">
                <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="setFollowingGroupStatusExecution" />
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="setFollowingStatusPersonTaskHandler" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.validation.profile.SetFollowingStatusBaseValidation">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.validation.profile.SetFollowingPersonStatusValidation">
                        <constructor-arg>
                            <ref bean="getPersonIdByAccountIdMapper" />
                        </constructor-arg>
                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.profile.SetFollowingPersonStatusAuthorization" />
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.SetFollowingPersonStatusExecution">
                <constructor-arg ref="jpaPersonMapper" />
                <constructor-arg ref="getPersonIdByAccountIdMapper" />
                <constructor-arg ref="addCachedPersonFollower" />
                <constructor-arg ref="getFollowerPersonIdsForPersonByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <!--  Start Page tab types are defined in shared resources so that they can be easily overridden
-->
    <bean id="createPersonActionFactory" class="org.eurekastreams.server.action.execution.CreatePersonActionFactory">
        <constructor-arg ref="getReadOnlyStreamsDbMapper" />
        <constructor-arg ref="newPersonDefaultStreamOrder" />
        <constructor-arg ref="membershipCriteriaPersonPropertyGenerator" />
    </bean>



    <!-- WORKS (sync part, at least) -->
    <bean id="createGroup" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
          <constructor-arg>
              <bean class="org.eurekastreams.server.action.validation.CreateGroupValidation">
                  <constructor-arg ref="jpaGroupMapper"/>
              </bean>
          </constructor-arg>
        <!-- Authorization - done inside execution (for now) -->
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
	       <!-- Execution -->
	       <bean class="org.eurekastreams.server.action.execution.profile.PersistResourceWrapperExecution">
		        <constructor-arg>
		            <bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
		                <constructor-arg ref="jpaPersonMapper" />
		                <constructor-arg ref="createPersonActionFactory" />
		                <constructor-arg ref="updaterStrategy" />
		                <constructor-arg ref="groupCreator" />
		            </bean>
		        </constructor-arg>
		        <constructor-arg ref="domainGroupToDomainGroupModelViewTransformer"/>
	        </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <!-- WORKS (sync part, at least) -->
    <bean id="updateGroup" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg>
             <bean class="org.eurekastreams.server.action.validation.UpdateGroupValidation" />
        </constructor-arg>
        <constructor-arg>
            <!-- Authorization -->
            <bean id="updateGroupAuthorization" class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.HashMapValueRequestTransformer">
                        <constructor-arg value="id" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <!-- Execution -->
           <bean class="org.eurekastreams.server.action.execution.profile.PersistResourceWrapperExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
		                <constructor-arg ref="jpaPersonMapper" />
		                <constructor-arg ref="createPersonActionFactory" />
		                <constructor-arg ref="updaterStrategy" />
		                <constructor-arg ref="groupUpdater" />
		            </bean>
                </constructor-arg>
                <constructor-arg ref="domainGroupToDomainGroupModelViewTransformer"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="domainGroupToDomainGroupModelViewTransformer"
    class="org.eurekastreams.server.persistence.mappers.cache.DomainGroupToDomainGroupModelViewTransfomer"/>

    <bean id="createPerson" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <!-- Execution -->
            <bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
                <constructor-arg ref="jpaPersonMapper" />
                <constructor-arg ref="createPersonActionFactory" />
                <constructor-arg ref="updaterStrategy" />
                <constructor-arg ref="personCreator" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <!-- Note: The UpdatePersonExecution strategy takes another TaskHandlerExecutionStrategy to do the full person update.
-->
    <bean id="updatePerson" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg>
             <!-- Validation -->
            <bean class="org.eurekastreams.server.action.validation.UpdatePersonValidation">
                <constructor-arg>
                     <bean class="org.eurekastreams.server.action.validation.EmailAddressValidator">
                        <constructor-arg value="${eureka.profile.emailregex}" />
                        <constructor-arg value="${eureka.profile.emailregexerror}" />
                     </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <!-- Authorization -->
            <bean class="org.eurekastreams.server.action.authorization.IsFormSubmitterUserAuthorization">
                <constructor-arg value="accountId"/>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <!-- Execution -->
            <bean class="org.eurekastreams.server.action.execution.UpdatePersonExecution">
                <constructor-arg ref="jpaPersonMapper"/>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.execution.PersistResourceExecution">
                        <constructor-arg ref="jpaPersonMapper" />
                        <constructor-arg ref="createPersonActionFactory" />
                        <constructor-arg ref="updaterStrategy" />
                        <constructor-arg ref="personUpdater" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="jpaBackgroundMapper"/>
                <constructor-arg ref="deleteCacheKeys"/>                
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="personLookupStrategy" class="org.eurekastreams.server.service.actions.strategies.DomainPersonLookup">
        <constructor-arg ref="jpaPersonMapper"/>
    </bean>

    <bean id="ldapPersonLookupViaAttribute" class="org.eurekastreams.server.service.actions.strategies.ldap.PersonLookupViaAttribute">
        <constructor-arg ref="findPersonByCnWildcardMapper"/>
    </bean>

    <bean id="ldapPersonLookupViaAccountIdAttribute" class="org.eurekastreams.server.service.actions.strategies.ldap.PersonLookupViaAttribute">
        <constructor-arg ref="findPersonByAccountIdMapper"/>
    </bean>

    <bean id="ldapPersonLookupViaAttributeQuery" class="org.eurekastreams.server.service.actions.strategies.ldap.PersonLookupViaAttribute">
        <constructor-arg ref="findPersonByProvidedLdapQueryMapper"/>
    </bean>

    <bean id="ldapPersonLookupViaLdapGroupMembership" class="org.eurekastreams.server.service.actions.strategies.ldap.PersonLookupViaMembership">
        <constructor-arg ref="findLdapGroupByCnNameMapper"/>
        <constructor-arg ref="findLdapGroupByLdapGroupMembershipMapper"/>
        <constructor-arg ref="findPersonByDirectLdapGroupMembershipMapper"/>
        <constructor-arg ref="baseLdapPath"/>
    </bean>

    <bean id="groupCreator"
        class="org.eurekastreams.server.service.actions.strategies.GroupCreator">
        <constructor-arg ref="jpaGroupMapper" />
        <constructor-arg ref="jpaPersonMapper" />
        <constructor-arg ref="getSystemAdministratorIds" />
        <constructor-arg ref="setFollowingGroupStatusExecution" />
        <constructor-arg ref="findSystemSettings" />
    </bean>

    <bean id="groupUpdater"
        class="org.eurekastreams.server.service.actions.strategies.GroupUpdater">
        <constructor-arg ref="jpaGroupMapper" />
        <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
        <constructor-arg ref="clearActivityStreamSearchStringCacheOnGroupUpdate" />
        <constructor-arg ref="setFollowingGroupStatusExecution" />
    </bean>

    <bean id="urlGenerator" class="org.eurekastreams.server.domain.AvatarUrlGenerator">
        <constructor-arg value="PERSON" />
    </bean>

    <bean id="imageWriter"
        class="org.eurekastreams.server.service.actions.strategies.ImageWriter">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.UpdateMapper" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.DeleteImage" />
                </constructor-arg>
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.db.GetImageByIdentifier" />
                </constructor-arg>
    </bean>

    <bean id="openSocialRegEx" class="java.lang.String">
        <constructor-arg value="\w{8}-\w{4}-\w{4}-\w{4}-\w{12}" />
    </bean>

    <bean id="pluginDefinitionPopulator"
        class="org.eurekastreams.server.service.actions.strategies.galleryitem.PluginDefinitionPopulator">
        <constructor-arg ref="gadgetMetaDataHttpFetcher" />
        <constructor-arg value="30"/>
        <constructor-arg value="NOTE"/>
    </bean>

    <bean id="gadgetDefinitionPopulator"
        class="org.eurekastreams.server.service.actions.strategies.galleryitem.GadgetDefinitionPopulator">
        <constructor-arg ref="gadgetMetaDataHttpFetcher" />
    </bean>

    <bean id="updaterStrategy"
        class="org.eurekastreams.server.service.actions.strategies.ReflectiveUpdater">
    </bean>

    <!-- actions to be called asynchronously by quartz scheduler -->

    <bean id="personCreator"
        class="org.eurekastreams.server.service.actions.strategies.PersonCreator">
        <constructor-arg ref="jpaPersonMapper" />
        <constructor-arg ref="getReadOnlyStreamsDbMapper" />
        <constructor-arg ref="newPersonDefaultStreamOrder" />
        <constructor-arg ref="membershipCriteriaPersonPropertyGenerator" />
    </bean>

	<bean id="updatePersonDisplayNameCaches" class="org.eurekastreams.server.action.execution.profile.UpdatePersonDisplayNameCaches">
	    <constructor-arg ref="getPersonsByIdsMapper" />
	</bean>

    <bean id="personUpdater" class="org.eurekastreams.server.service.actions.strategies.PersonUpdater">
        <constructor-arg ref="jpaPersonMapper" />
        <constructor-arg ref="updatePersonDisplayNameCaches" />
    </bean>

    <bean id="tabPermission"
        class="org.eurekastreams.server.action.authorization.start.TabPermission">
        <constructor-arg>
            <ref bean="getTabPermissionByPersonAndTabMapper" />
        </constructor-arg>
    </bean>

    <bean id="defaultResourceSortOrder" class="org.eurekastreams.server.domain.ResourceSortCriteria">
        <constructor-arg>
            <list>
                <bean id="sortByNameAsc"
                    class="org.eurekastreams.server.domain.ResourceSortCriterion">
                    <constructor-arg value="NAME" />
                    <constructor-arg value="ASCENDING" />
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <!-- ****************************** -->
    <!-- OAuth Action configuration     -->
    <!-- ****************************** -->

    <bean name="oauthDataStore"
        class="org.eurekastreams.server.service.opensocial.oauth.OAuthDataStoreImpl">
        <property name="serviceActionController" ref="serviceActionController" />
        <constructor-arg ref="createOAuthRequestToken" />
        <constructor-arg ref="oauthAuthorize" />
        <constructor-arg ref="updateRequestToAccessToken" />
        <constructor-arg ref="getOAuthEntryByToken" />
        <constructor-arg ref="disableOAuthToken" />
        <constructor-arg ref="removeOAuthToken" />
        <constructor-arg ref="getOAuthConsumerByConsumerKey" />
        <constructor-arg ref="getSecurityTokenForConsumerRequest" />
        <constructor-arg ref="openSocialPrincipalDaoTransWrapped" />
    </bean>

    <bean id="oauthAuthorize" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.OAuthAuthorizeExecution">
                <constructor-arg ref="getOAuthEntry" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="oauthEntryConversionStrat" class="org.eurekastreams.server.action.execution.opensocial.OAuthEntryConversionStrategy">
        <constructor-arg ref="getOAuthConsumerByConsumerKeyMapper" />
    </bean>

    <bean id="createOAuthRequestToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.CreateOAuthRequestTokenExecution">
                <constructor-arg value="${eureka.oauth.domain}" />
                <constructor-arg value="${eureka.oauth.container}" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
                <constructor-arg ref="oauthEntryConversionStrat" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="updateRequestToAccessToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.UpdateRequestToAccessTokenExecution">
                <constructor-arg ref="deleteOAuthEntry" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
                <constructor-arg ref="oauthEntryConversionStrat" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="getOAuthEntryByToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.GetOAuthEntryByTokenExecution">
                <constructor-arg ref="getOAuthEntry" />
                <constructor-arg ref="oauthEntryConversionStrat" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="disableOAuthToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.DisableOAuthTokenExecution">
                <constructor-arg ref="getOAuthEntry" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="removeOAuthToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.RemoveOAuthTokenExecution">
                <constructor-arg ref="deleteOAuthEntry" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="getOAuthConsumerByConsumerKey" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.GetOAuthConsumerByConsumerKeyExecution">
                <constructor-arg ref="getOAuthConsumerByConsumerKeyMapper" />
                <constructor-arg value="${eureka.oauth.requesttokenurl}" />
                <constructor-arg value="${eureka.oauth.authorizeurl}" />
                <constructor-arg value="${eureka.oauth.accesstokenurl}" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

        <bean id="getSecurityTokenForConsumerRequest" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.GetSecurityTokenForConsumerRequestExecution">
                <constructor-arg value="${eureka.oauth.domain}" />
                <constructor-arg value="${eureka.oauth.container}" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getConsumerInfo" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.GetConsumerInfoExecution">
                <constructor-arg ref="getOAuthConsumerByServiceNameMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getConsumerTokenInfo" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.GetConsumerTokenInfoExecution">
                <constructor-arg ref="getOAuthConsumerByServiceNameMapper" />
                <constructor-arg ref="getOAuthTokenMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="setConsumerTokenInfo" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.SetConsumerTokenInfoExecution">
                <constructor-arg ref="getOAuthConsumerByServiceNameMapper" />
                <constructor-arg>
                    <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="removeConsumerToken" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.opensocial.RemoveConsumerTokenExecution">
                <constructor-arg ref="getOAuthConsumerByServiceNameMapper" />
                <constructor-arg ref="deleteOAuthTokenMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="emailerFactory"
        class="org.eurekastreams.server.service.actions.strategies.EmailerFactory">
        <constructor-arg value="smtp" />
        <constructor-arg>
            <map>
                <entry key="mail.smtp.host" value="${eureka.mail.smtp.host}" />
                <entry key="mail.smtp.port" value="${eureka.mail.smtp.port}" />
                <entry key="mail.smtp.sendpartial" value="true" />
            </map>
        </constructor-arg>
        <constructor-arg value="${eureka.mail.support.emailaddress}" />
    </bean>

    <bean id="notificationEmailerFactory"
        class="org.eurekastreams.server.service.actions.strategies.EmailerFactory">
        <constructor-arg value="smtp" />
        <constructor-arg>
            <map>
                <entry key="mail.smtp.host" value="${eureka.mail.smtp.host}" />
                <entry key="mail.smtp.port" value="${eureka.mail.smtp.port}" />
                <entry key="mail.smtp.sendpartial" value="true" />
            </map>
        </constructor-arg>
        <constructor-arg value="${eureka.mail.smtp.emailaddress}" />
    </bean>

    <bean id="canCommentFilter"
        class="org.eurekastreams.server.service.actions.strategies.activity.CanCommentFilter">
        <constructor-arg ref="getPeopleByAccountIdsMapper" />
        <constructor-arg>
            <ref bean="bulkDomainGroupsByShortNameMapper" />
        </constructor-arg>
        <constructor-arg>
            <ref bean="getAllPersonIdsWhoHaveGroupCoordinatorAccess" />
        </constructor-arg>
    </bean>

    <bean id="canShareFilter"
        class="org.eurekastreams.server.service.actions.strategies.activity.CanShareFilter">
        <constructor-arg>
            <ref bean="bulkDomainGroupsByShortNameMapper" />
        </constructor-arg>
    </bean>

    <bean id="likeFilter"
        class="org.eurekastreams.server.service.actions.strategies.activity.PopulateActivityDTOLikeData">
        <constructor-arg ref="getLikedActivityIdsByUserId" />
        <constructor-arg ref="getPeopleWhoLikedActivity" />
        <!-- Only gets the person model view data needed for avatar display -->
        <constructor-arg ref="getPersonAvatarDisplayInfoByIdsMapper" />
        <constructor-arg value="10" />
    </bean>
    <bean id="deleteFilter"
        class="org.eurekastreams.server.service.actions.strategies.activity.PopulateActivityDTODeletabilityData">
        <constructor-arg ref="commentDeletePropertyStrategy" />
        <constructor-arg ref="activityDeletePropertyStrategy" />
    </bean>
    <bean id="savedFilter"
        class="org.eurekastreams.server.service.actions.strategies.activity.PopulateActivityDTOSavedData">
        <constructor-arg ref="getStarredActivityIds" />
    </bean>
    <bean id="serverTimeFilter"
        class="org.eurekastreams.server.service.actions.strategies.activity.PopulateActivityDTOServerDateTime" />

	<bean id="authorLockedFilter"
		class="org.eurekastreams.server.service.actions.strategies.activity.IsAuthorLockedFilter">
		<constructor-arg ref="getPersonsByIdsMapper" />
	</bean>

    <bean id="commentAuthorLockedFilter"
        class="org.eurekastreams.server.service.actions.strategies.activity.IsCommentAuthorLockedFilter">
        <constructor-arg ref="getPersonsByIdsMapper" />
    </bean>


    <bean id="getActivitiesByRequest" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg ref="getActivitiesByRequestExecutor" />
        <constructor-arg value="true" />
    </bean>

    <bean id="getCurrentUsersStreams" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.GetCurrentUsersStreamsExecution">
                <constructor-arg ref="getUserStreamsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getCurrentUsersBookmarks" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.stream.GetCurrentUsersBookmarksExecution">
                <constructor-arg ref="getUserBookmarksMapper" />
		        <constructor-arg>
        			<bean class="org.eurekastreams.server.domain.strategies.BookmarkStreamFilterTransformer">
                        <constructor-arg ref="getPeopleByAccountIdsMapper" />   
						<constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
            		</bean>
        		</constructor-arg>

            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

   <!--
        Beans for all of the Verb Validators that will be added to the
        VerbValidator HashMap
    -->
    <bean id="postVerbValidator"
        class="org.eurekastreams.server.service.actions.strategies.activity.PostVerbValidator" />

    <bean id="shareVerbValidator"
        class="org.eurekastreams.server.service.actions.strategies.activity.ShareVerbValidator">
        <constructor-arg ref="bulkActivitiesMapper" />
        <constructor-arg ref="transactionManager" />
        <constructor-arg ref="bulkDomainGroupsByShortNameMapper" />
    </bean>

    <util:map id="verbValidators" map-class="java.util.HashMap">
        <entry key="POST">
            <ref bean="postVerbValidator" />
        </entry>
        <entry key="SHARE">
            <ref bean="shareVerbValidator" />
        </entry>
    </util:map>

    <!--
        Beans for all of the Object Validators that will be added to the
        ObjectValidator HashMap
    -->
    <bean id="noteObjectValidator"
        class="org.eurekastreams.server.service.actions.strategies.activity.ObjectMapParameterValidator">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                <constructor-arg value="content" />
                <constructor-arg value="java.lang.String" />
                <constructor-arg value="Content is required for Note Activities." />
                <property name="mapParameterValidatorDecorator">
                    <bean
                        class="org.eurekastreams.server.service.actions.strategies.MapParameterLengthValidator">
                        <constructor-arg value="content" />
                        <constructor-arg value="250" />
                        <constructor-arg
                            value="Note Activity Content can only be 250 characters or less." />
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="bookmarkObjectValidator"
        class="org.eurekastreams.server.service.actions.strategies.activity.ObjectMapParameterValidator">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                <constructor-arg value="targetUrl" />
                <constructor-arg value="java.lang.String" />
                <constructor-arg value="TargetUrl is required for Bookmark Activities." />
                <property name="mapParameterValidatorDecorator">
                    <bean
                        class="org.eurekastreams.server.service.actions.strategies.MapParameterLengthValidator">
                        <constructor-arg value="content" />
                        <constructor-arg value="250" />
                        <constructor-arg
                            value="Bookmark Activity Content can only be 250 characters or less." />
                        <property name="mapParameterValidatorDecorator">
                            <bean
                                class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                                <constructor-arg value="targetTitle" />
                                <constructor-arg value="java.lang.String" />
                                <constructor-arg
                                    value="TargetTitle is required for Bookmark Activities." />
                            </bean>
                        </property>
                    </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="fileObjectValidator"
        class="org.eurekastreams.server.service.actions.strategies.activity.ObjectMapParameterValidator">
        <constructor-arg>
            <bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                <constructor-arg value="targetUrl" />
                <constructor-arg value="java.lang.String" />
                <constructor-arg value="TargetUrl is required for File Activities." />
                <property name="mapParameterValidatorDecorator">
						<bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
							<constructor-arg value="targetTitle" />
							<constructor-arg value="java.lang.String" />
							<constructor-arg value="TargetTitle is required for File Activities." />
							<property name="mapParameterValidatorDecorator">
								<bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
									<constructor-arg value="source" />
									<constructor-arg value="java.lang.String" />
									<constructor-arg value="Source is required for File Activities." />
								</bean>
							</property>
						</bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <util:map id="objectValidators" map-class="java.util.HashMap">
		<entry key="NOTE" value-ref="noteObjectValidator" />
		<entry key="BOOKMARK" value-ref="bookmarkObjectValidator" />
		<entry key="FILE" value-ref="fileObjectValidator" />
    </util:map>

    <bean id="themeUuidSeparator" class="java.lang.String">
        <constructor-arg value="_uuid_" />
    </bean>

    <bean id="themeExtension" class="java.lang.String">
        <constructor-arg value=".css" />
    </bean>

    <bean id="themeUrlPrefix" class="java.lang.String">
        <constructor-arg value="/eurekastreams/themes/" />
    </bean>

    <bean id="personPagePropertiesDTOToThemeCssUrlTransformer" class="org.eurekastreams.server.persistence.mappers.cache.PersonPagePropertiesDTOToThemeCssUrlTransformer">
        <constructor-arg ref="themeUrlPrefix"/>
        <constructor-arg ref="themeExtension"/>
        <constructor-arg ref="themeUuidSeparator"/>
        <constructor-arg ref="getThemeVersionByUuid"/>
    </bean>

    <bean id="requestUriToThemeUuidTransformer" class="org.eurekastreams.server.service.servlets.RequestUriToThemeUuidTransformer">
        <constructor-arg ref="themeUuidSeparator"/>
        <constructor-arg ref="themeExtension"/>
    </bean>

    <bean id="getPersonPageProperties" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetPersonPagePropertiesExecution">
                <constructor-arg ref="getPersonPagePropertiesById" />
                <constructor-arg ref="personPagePropertiesDTOToThemeCssUrlTransformer"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getPerson" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetPersonExecution">
                <constructor-arg ref="jpaPersonMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

   <!--  **************************** BEGIN Gallery Item Persisting ****************************   -->

    <!-- GALLERY ITEM VALIDATORS -->
    <bean id="themeValidator" class="org.eurekastreams.server.action.validation.gallery.UrlXmlValidator">
        <constructor-arg value="http://www.w3.org/2001/XMLSchema" />
        <constructor-arg value="/org/eurekastreams/server/conf/schema/theme.xsd" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.service.actions.strategies.URLFetcher" />
        </constructor-arg>
    </bean>
    <bean id="gadgetDefinitionValidator" class="org.eurekastreams.server.action.validation.gallery.UrlXmlValidator">
        <constructor-arg value="http://www.w3.org/2001/XMLSchema" />
        <constructor-arg value="/org/eurekastreams/server/conf/schema/openSocialGadget_0-9.xsd" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.service.actions.strategies.URLFetcher" />
        </constructor-arg>
    </bean>

    <bean id="editGalleryTabTemplateValidator"
        class="org.eurekastreams.server.action.validation.MapParameterDecoratorValidation">
        <constructor-arg>
            <bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                <constructor-arg value="description" />
                <constructor-arg value="java.lang.String" />
                <constructor-arg value="Description is required." />
                <property name="mapParameterValidatorDecorator">
                        <bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                            <constructor-arg value="category" />
                            <constructor-arg value="java.lang.String" />
                            <constructor-arg value="Category is required" />
                            <property name="mapParameterValidatorDecorator">
                                <bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                                    <constructor-arg value="tab" />
                                    <constructor-arg value="java.lang.String" />
                                    <constructor-arg value="Source tab is required." />
                                </bean>
                            </property>
                        </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <bean id="createGalleryTabTemplateValidator"
        class="org.eurekastreams.server.action.validation.MapParameterDecoratorValidation">
        <constructor-arg>
            <bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                <constructor-arg value="description" />
                <constructor-arg value="java.lang.String" />
                <constructor-arg value="Description is required." />
                <property name="mapParameterValidatorDecorator">
                        <bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                            <constructor-arg value="category" />
                            <constructor-arg value="java.lang.String" />
                            <constructor-arg value="Category is required" />
                            <property name="mapParameterValidatorDecorator">
                                <bean class="org.eurekastreams.server.service.actions.strategies.MapParameterValidator">
                                    <constructor-arg value="tab" />
                                    <constructor-arg value="java.lang.String" />
                                    <constructor-arg value="Source tab is required." />
                                    <property name="mapParameterValidatorDecorator">
		                                <bean class="org.eurekastreams.server.service.actions.strategies.MapParameterRejectStringValueValidator">
		                                    <constructor-arg value="tab" />
		                                    <constructor-arg value="-1" />
		                                    <constructor-arg value="Source tab is required." />
		                                </bean>
		                            </property>
                                </bean>
                            </property>
                        </bean>
                </property>
            </bean>
        </constructor-arg>
    </bean>

    <!-- GALLERY ITEMPOPULATORS -->
    <bean id="themePopulator"
        class="org.eurekastreams.server.service.actions.strategies.galleryitem.ThemePopulator">
        <constructor-arg>
            <ref bean="documentCreator" />
        </constructor-arg>
        <constructor-arg ref="deleteCacheKeys"/>
        <constructor-arg>
             <list>
                 <ref bean="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.THEME_CSS_BY_UUID"/>
                 <ref bean="org.eurekastreams.server.persistence.mappers.cache.CacheKeys.THEME_HASH_BY_UUID"/>
             </list>
         </constructor-arg>
    </bean>

    <bean id="createGalleryTabTemplate" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="createGalleryTabTemplateValidator" />
        <constructor-arg ref="isSystemAdminAuthorization"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.CreateGalleryTabTemplateExecution">
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="createGalleryTabTemplateMapper" />
                <constructor-arg ref="jpaGalleryItemCategoryMapper" />
                <constructor-arg>
		            <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
		        </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="editGalleryTabTemplate" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="editGalleryTabTemplateValidator" />
        <constructor-arg ref="isSystemAdminAuthorization"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.CreateGalleryTabTemplateExecution">
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="jpaGalleryItemCategoryMapper" />
                <constructor-arg ref="flushMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="addTabFromGalleryTabTemplate" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="addTabFromGalleryValidation" />
        <constructor-arg ref="noAuthorizationStrategy"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.AddTabFromGalleryTabTemplateIdExecution">
                <constructor-arg ref="findByIdMapper" />
                <constructor-arg ref="deleteCacheKeys" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="deleteGalleryTabTemplate" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="isSystemAdminAuthorization" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg ref="deleteGalleryTabTemplateByIdDbMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="getSortedGalleryTabTemplateDTOs" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.validation.gallery.GetGalleryItemsValidation" />
        </constructor-arg>
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean
                class="org.eurekastreams.server.action.execution.gallery.GetGalleryItemsExecution">
                <constructor-arg>
                    <ref bean="galleryTabTemplateDTODBMapper" />
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="addTheme" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- fields: param map - "url", "category"  -->
        <constructor-arg ref="themeValidator" />
        <constructor-arg ref="isSystemAdminAuthorization"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.PersistGalleryItemExecution">
                <constructor-arg>
                    <!-- Theme Creator -->
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemCreator">
                        <constructor-arg ref="jpaThemeMapper" />
                        <constructor-arg>
                            <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.ThemeFactory" />
                        </constructor-arg>
                        <constructor-arg ref="jpaPersonMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="themePopulator" />
                <constructor-arg>
                    <!-- Theme Inserter -->
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemInserter">
                        <constructor-arg ref="jpaThemeMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="jpaGalleryItemCategoryMapper" />
                <constructor-arg value="THEME" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="editTheme" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- fields: param map - "url", "category"  -->
        <constructor-arg ref="themeValidator" />
        <constructor-arg ref="isSystemAdminAuthorization"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.PersistGalleryItemExecution">
                <constructor-arg>
                    <!-- Theme Finder -->
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemFinder">
                        <constructor-arg ref="jpaThemeMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="themePopulator" />
                <constructor-arg>
                    <!-- Theme Updater -->
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemUpdater">
                        <constructor-arg ref="jpaThemeMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="jpaGalleryItemCategoryMapper" />
                <constructor-arg value="THEME" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="addGadgetDefinition" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- fields: param map - "url", "category"  -->
        <constructor-arg ref="gadgetDefinitionValidator" />
        <constructor-arg ref="isSystemAdminAuthorization"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.PersistGalleryItemExecution">
                <constructor-arg>
                    <!-- Gadget Definition Creator -->
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemCreator">
                        <constructor-arg>
                            <ref bean="jpaGadgetDefinitionMapper" />
                        </constructor-arg>
                        <constructor-arg>
                            <bean
                                class="org.eurekastreams.server.service.actions.strategies.galleryitem.GadgetDefinitionFactory" />
                        </constructor-arg>
                        <constructor-arg>
                            <ref bean="jpaPersonMapper" />
                        </constructor-arg>
                    </bean>
                </constructor-arg>
                <constructor-arg ref="gadgetDefinitionPopulator"/>
                <constructor-arg>
                    <!-- Gadget Definition Inserter -->
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemInserter">
                        <constructor-arg ref="jpaGadgetDefinitionMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="jpaGalleryItemCategoryMapper" />
                <constructor-arg value="GADGET" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>


    <bean id="addPluginDefinition" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- fields: param map - "url", "category"  -->
        <constructor-arg ref="gadgetDefinitionValidator" />
        <constructor-arg ref="isSystemAdminAuthorization"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.PersistGalleryItemExecution">
                <constructor-arg>
                    <!-- Gadget Definition Creator -->
                    <bean id="pluginDefinitionCreator"
                    class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemCreator">
                        <constructor-arg>
                            <ref bean="jpaPluginDefinitionMapper" />
                        </constructor-arg>
                        <constructor-arg>
                        <bean
                            class="org.eurekastreams.server.service.actions.strategies.galleryitem.PluginDefinitionFactory" />
                        </constructor-arg>
                        <constructor-arg>
                            <ref bean="jpaPersonMapper" />
                        </constructor-arg>
                    </bean>
                </constructor-arg>
                <constructor-arg ref="pluginDefinitionPopulator"/>
                <constructor-arg>
                    <!-- Gadget Definition Inserter -->
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemInserter">
                        <constructor-arg ref="jpaPluginDefinitionMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="jpaGalleryItemCategoryMapper" />
                <constructor-arg value="PLUGIN" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="editGadgetDefinition" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- fields: param map - "url", "category"  -->
        <constructor-arg ref="gadgetDefinitionValidator" />
        <constructor-arg ref="isSystemAdminAuthorization"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.PersistGalleryItemExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemFinder">
                        <constructor-arg ref="jpaGadgetDefinitionMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="gadgetDefinitionPopulator"/>
                <constructor-arg>
                    <!-- Gadget Definition Updater -->
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemUpdater">
                        <constructor-arg ref="jpaGadgetDefinitionMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="jpaGalleryItemCategoryMapper" />
                <constructor-arg value="GADGET" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <bean id="editPluginDefinition" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- fields: param map - "url", "category"  -->
        <constructor-arg ref="gadgetDefinitionValidator" />
        <constructor-arg ref="isSystemAdminAuthorization"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.gallery.PersistGalleryItemExecution">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemFinder">
                        <constructor-arg ref="jpaPluginDefinitionMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="pluginDefinitionPopulator"/>
                <constructor-arg>
                    <!-- Gadget Definition Updater -->
                    <bean class="org.eurekastreams.server.service.actions.strategies.galleryitem.GalleryItemUpdater">
                        <constructor-arg ref="jpaPluginDefinitionMapper" />
                    </bean>
                </constructor-arg>
                <constructor-arg ref="jpaGalleryItemCategoryMapper" />
                <constructor-arg value="PLUGIN" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>

    <!--  **************************** END Gallery Item Persisting ****************************   -->

    <bean id="updateDomainGroupBanner" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.UpdateBannerExecution">
                <constructor-arg ref="domainGroupBannerMapper" />
                <constructor-arg ref="domainGroupBannerCacheMapper" />
                <constructor-arg ref="imageWriter" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>
    
    <bean id="documentCreator" class="org.eurekastreams.server.service.actions.strategies.DocumentCreator">
        <constructor-arg>
            <bean class="org.eurekastreams.server.service.actions.strategies.URLFetcher" />
        </constructor-arg>
    </bean>

    <bean id="personFinder" class="org.eurekastreams.server.service.actions.strategies.PersonFinder">
        <constructor-arg>
            <ref bean="jpaPersonMapper" />
        </constructor-arg>
    </bean>

    <bean id="groupFinder" class="org.eurekastreams.server.service.actions.strategies.GroupFinder">
        <constructor-arg>
            <ref bean="jpaGroupMapper" />
        </constructor-arg>
    </bean>

    <bean id="domainGroupBannerMapper" class="org.eurekastreams.server.persistence.mappers.DomainGroupBannerMapper"/>

    <!-- This class is just a stub for the time being to fulfill the Update and Delete Execution strat requirements for the mapper.
-->
    <bean id="domainGroupBannerCacheMapper" class="org.eurekastreams.server.persistence.mappers.cache.UpdateCachedDomainGroupBannerIdMapper"/>

    <!-- this action is kicked off by liking activity (which clears cache list), and just reloads the list into cache,
    doesn't need to be a _FORCE_REFRESH, if it has happened already, no need to ping DB again
-->
    <bean id="loadLikedActivityIdsByUserId" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean parent="baseParamListExecuteDomainMapperExecution">
                <constructor-arg ref="getLikedActivityIdsByUserId" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="updatePersonAvatarCachesStrategy" class="org.eurekastreams.server.action.execution.profile.UpdatePersonAvatarCaches"/>

    <bean id="resizePersonAvatarExecution" class="org.eurekastreams.server.action.execution.profile.ResizeAvatarExecution">
       <constructor-arg ref="jpaPersonMapper" />
       <constructor-arg>
           <bean class="org.eurekastreams.server.service.actions.strategies.HashGeneratorStrategy" />
       </constructor-arg>
       <constructor-arg ref="imageWriter" />
       <constructor-arg ref="personFinder" />
       <property name="cacheUpdaterStategy" ref="updatePersonAvatarCachesStrategy" />
   </bean>

    <bean id="resizeGroupAvatarExecution" class="org.eurekastreams.server.action.execution.profile.ResizeAvatarExecution">
        <constructor-arg ref="jpaGroupMapper"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.service.actions.strategies.HashGeneratorStrategy" />
        </constructor-arg>
        <constructor-arg ref="imageWriter"/>
        <constructor-arg ref="groupFinder"/>
    </bean>

   <bean id="resizePersonAvatar" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg ref="resizePersonAvatarExecution" />
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="deletePersonAvatar" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.DeleteAvatarExecution">
                <constructor-arg ref="jpaPersonMapper" />
                <constructor-arg ref="imageWriter" />
                <constructor-arg ref="personFinder" />
                <property name="cacheUpdaterStategy" ref="updatePersonAvatarCachesStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="savePersonAvatar" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.SaveAvatarExecution">
                <constructor-arg ref="jpaPersonMapper" />
                <constructor-arg ref="resizePersonAvatarExecution" />
                <constructor-arg ref="imageWriter" />
                <constructor-arg ref="personFinder" />
                <property name="cacheUpdaterStategy" ref="updatePersonAvatarCachesStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="resizeGroupAvatar" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.EntityIdFromResizeAvatarRequestTransformer" >
                        <property name="returnValueAsString" value="true"/>
                    </bean>
                </constructor-arg>
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
            </bean>
        </constructor-arg>
        <constructor-arg ref="resizeGroupAvatarExecution" />
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="deleteGroupAvatar" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.ToStringTransformer"/>
                </constructor-arg>
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.DeleteAvatarExecution">
                <constructor-arg ref="jpaGroupMapper"/>
                <constructor-arg ref="imageWriter"/>
                <constructor-arg ref="groupFinder"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <bean id="saveGroupAvatar" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.authorization.CurrentUserGroupCoordinatorRecursivelyAuthorization">
                <constructor-arg>
                    <bean class="org.eurekastreams.server.action.request.transformer.EntityIdFromSaveImageRequestTransformer" >
                        <property name="returnValueAsString" value="true"/>
                    </bean>
                </constructor-arg>
                <constructor-arg ref="getAllPersonIdsWhoHaveGroupCoordinatorAccess"/>
            </bean>
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.SaveAvatarExecution">
                <constructor-arg ref="jpaGroupMapper"/>
                <constructor-arg ref="resizeGroupAvatarExecution"/>
                <constructor-arg ref="imageWriter"/>
                <constructor-arg ref="groupFinder"/>
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>


    <bean id="deleteDomainGroupBanner" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy"/>
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.profile.DeleteBannerExecution">
                <constructor-arg ref="domainGroupBannerMapper" />
                <constructor-arg ref="domainGroupBannerCacheMapper" />
                <constructor-arg ref="imageWriter" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <!-- Action to get a shared resource by unique key -->
    <bean id="getSharedResourceByKeyAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetSharedResourcePropertiesExecution">
                <constructor-arg ref="getSharedResourceByKeyMapper" />
                <constructor-arg ref="getPersonAvatarDisplayInfoByIdsMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getUsageMetricSummaryAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetUsageMetricSummaryExecution">
                <constructor-arg ref="getUsageMetricSummaryMapper" />
                <constructor-arg>
                    <bean class="org.eurekastreams.commons.date.WeekdaysInDateRangeStrategy" />
                </constructor-arg>
                <constructor-arg ref="dayOfWeekStrategy" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getPeopleThatLikedSharedResourceAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
               <constructor-arg>
                    <bean class="org.eurekastreams.server.domain.strategies.ChainedMapperWrapperMapper">

                        <!-- Get the people ids that liked the shared resource -->
                        <constructor-arg>

                            <!-- via the shared resource cache/db mapper -->
                            <bean class="org.eurekastreams.server.persistence.mappers.DomainMapperTransformer">

                                <!-- Get the shared resource dto from cache/database -->
                                <constructor-arg ref="getSharedResourceByKeyMapper" />

                                <!-- Transform the shared resource dto to a list of people ids that liked it
-->
                                <constructor-arg>
                                    <bean class="org.eurekastreams.server.service.actions.strategies.SharedResourceDTOToLikerPeopleIdsTransformer" />
                                </constructor-arg>

                            </bean>

                        </constructor-arg>

                        <!-- And convert those people ids to PersonModelViews -->
                        <constructor-arg ref="getPersonsByIdsMapper" />

                    </bean>
                </constructor-arg>
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <bean id="getPeopleThatSharedSharedResourceAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
		        <constructor-arg>
		            <bean class="org.eurekastreams.server.domain.strategies.ChainedMapperWrapperMapper">

		                <!-- Get the people ids that liked the shared resource -->
                        <constructor-arg>

                            <!-- via the shared resource cache/db mapper -->
                            <bean class="org.eurekastreams.server.persistence.mappers.DomainMapperTransformer">

                                <!-- Get the shared resource dto from cache/database -->
                                <constructor-arg ref="getSharedResourceByKeyMapper" />

                                <!-- Transform the shared resource dto to a list of people ids that liked it
-->
                                <constructor-arg>
                                    <bean class="org.eurekastreams.server.service.actions.strategies.SharedResourceDTOToSharerPeopleIdsTransformer" />
                                </constructor-arg>

                            </bean>

                        </constructor-arg>

		                <constructor-arg ref="getPersonsByIdsMapper" />
		            </bean>
		        </constructor-arg>
		    </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <!-- Execution strategy to generate a daily usage summary record for the previous day - takes no input
-->
    <bean id="generateDailyUsageSummaryExecution" class="org.eurekastreams.server.action.execution.GenerateDailyUsageSummaryExecution">
    		<!-- Days to try to process data for - it skips the date if it's already got data -->
        <constructor-arg value="7" />
        <constructor-arg ref="getDateFromDaysAgoStrategy"/>
        <constructor-arg ref="getDailyUsageSummaryByDateDbMapper" />
        <constructor-arg ref="getDailyMessageCountDbMapper" />
        <constructor-arg ref="getDailyPageViewCountDbMapper" />
        <constructor-arg ref="getDailyStreamContributorCountDbMapper" />
        <constructor-arg ref="getDailyStreamViewCountDbMapper" />
        <constructor-arg ref="getDailyStreamViewerCountDbMapper" />
        <constructor-arg ref="getDailyUniqueVisitorCountDbMapper" />
        <constructor-arg ref="getDailyMessageResponseTime" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.InsertMapper" />
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.db.metrics.DeleteOldUsageMetricDataDbMapper">
                <!-- keep 4 days of metric data -->
                <constructor-arg value="4" />
                <!-- keey 30 days of summary data -->
                <constructor-arg value="30" />
            </bean>
        </constructor-arg>
        <constructor-arg ref="dayOfWeekStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.db.metrics.GetMetricStreamScopeIdsDbMapper" />
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.db.metrics.GetStreamTotalActivityCountDbMapper" />
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.db.metrics.GetStreamTotalCommentCountDbMapper" />
        </constructor-arg>
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.db.metrics.GetTotalStreamContributorCountDbMapper" />
        </constructor-arg>
        <constructor-arg ref="clearMapper" />
        <!-- Generate the usage metrics and dump into cache -->
        <constructor-arg ref="getUsageMetricSummaryMapper_FORCE_REFRESH" />
        <!-- Generate the discover page lists and dump into cache -->
        <constructor-arg ref="streamDiscoverListsMapper_FORCE_REFRESH" />
        <!-- 30 days of summary data caching -->
        <constructor-arg value="30" />
    </bean>

    <bean id="updateGroupStickyActivityExecution" class="org.eurekastreams.server.action.execution.ExecuteDomainMapperClearCacheExecution">
        <constructor-arg ref="passThruRequestTransformer" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.persistence.mappers.db.UpdateGroupStickyActivityDbMapper" />
        </constructor-arg>              
        <constructor-arg ref="memcachedCache" />
        <constructor-arg ref="CacheKeys.GROUP_BY_ID" />
        <constructor-arg ref="hasGroupIdToGroupIdRequestTransformer" />
    </bean>

	<bean id="updateGroupStickyActivity" class="org.eurekastreams.commons.actions.service.TaskHandlerServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="groupCoordinatorAuthorization" />
        <constructor-arg ref="updateGroupStickyActivityExecution" />
        <constructor-arg value="false" />
        <constructor-arg ref="taskHandler" />
    </bean>

    <!--
        ****************************************************************************************
        DIRECTORY BROWSING
        ****************************************************************************************
    -->
    <!-- Strategy to populate additional fields after a search request -->
    <bean id="searchResultAdditionalPropertyPopulator"
        class="org.eurekastreams.server.service.actions.strategies.directory.SearchResultAdditionalPropertyPopulator">
        <constructor-arg ref="fieldMatchDeterminer" />
    </bean>
     <bean id="getAllPersonAdditionalProperties" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg ref="getPersonAdditionalProperties" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
	<bean id="getAllPersonAdditionalPropertiesSingle" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg ref="getPersonAdditionalPropertiesSingle" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    <!-- Action to regenerate the cache for the Stream discovery page -->
    <bean id="regenerateStreamDiscoverListsAction" class="org.eurekastreams.commons.actions.async.AsyncAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.RegenerateStreamDiscoverListsExecution">
                <constructor-arg ref="streamDiscoverListsMapper_FORCE_REFRESH" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>

    <!-- Action to get the stream discover page lists -->
    <bean id="getStreamDiscoverListsDTOAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean id="getStreamDiscoverListsDTO" class="org.eurekastreams.server.action.execution.GetStreamDiscoverListsDTOExecution">
		         <constructor-arg ref="getSuggestedPeopleMapper" />
		         <constructor-arg ref="getSuggestedGroupsMapper" />
		         <constructor-arg value="10" />  <!-- Number of suggested streams -->
		         <constructor-arg ref="streamDiscoverListsMapper" />
		         <constructor-arg ref="displayInfoSettableDataPopulator" />
		         <constructor-arg ref="followerStatusPopulator" />
		         <constructor-arg ref="getPersonsByIdsMapper" />
		    </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    
   <bean id="getStreamEmailAddressForCurrentUserAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <!-- Validation -->
        <constructor-arg ref="noValidationStrategy" />
        <!-- Authorization -->
        <constructor-arg ref="noAuthorizationStrategy" />
        <!-- Execution -->
        <constructor-arg>
            <bean class="org.eurekastreams.server.action.execution.GetEmailAddressForStreamExecution">
                <constructor-arg ref="tokenContentFormatter" />
                <constructor-arg ref="tokenContentEmailAddressBuilder" />
            </bean>
        </constructor-arg>
        <constructor-arg value="false" />
    </bean>
        
    <bean id="getPersonByIdAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg ref="getPersonByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
    <bean id="getGroupByIdAction" class="org.eurekastreams.commons.actions.service.ServiceAction">
        <constructor-arg ref="noValidationStrategy" />
        <constructor-arg ref="noAuthorizationStrategy" />
        <constructor-arg>
            <bean parent="baseParamExecuteDomainMapperExecution">
                <constructor-arg ref="getGroupByIdMapper" />
            </bean>
        </constructor-arg>
        <constructor-arg value="true" />
    </bean>
        
</beans>
