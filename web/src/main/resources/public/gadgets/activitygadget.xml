
<?xml version="1.0" encoding="UTF-8"?>
<Module>
    <ModulePrefs title="Activity" thumbnail="${build.web.baseurl}/style/images/isgs_news.png" title_url="http://communications.isgs.lmco.com" author="Eureka Streams"
        description="IS&amp;GS News app provides a listing of the recent IS&amp;GS News headlines, Product Line, and Location specific articles." author_email="support@eurekastreams.org">
        <Require feature="opensocial-0.9" />
        <Require feature="osapi" />
        <Require feature="views" />
        <Require feature="dynamic-height" />
        <Require feature="opensocial-data"/>
        <Require feature="opensocial-data-context"/>
        <Require feature="settitle" />
        <Require feature="eurekastreams-core" />
        <Require feature="xmlutil"/>
        <Optional feature="content-rewrite">
                        <Param name="expires">1</Param>
                        <Param name="include-url"></Param>
                        <Param name="minify-css">true</Param>
                        <Param name="minify-js">true</Param>
                        <Param name="minify-html">true</Param>
        </Optional>
    </ModulePrefs>
	<UserPref name="gadgetTitle" datatype="text" default_value="Activity App" />
	<UserPref name="streamQuery" datatype="hidden" default_value="" />
	<UserPref name="streamLocation" datatype="hidden" default_value="" />
    <Content type="html" view="default, canvas">
    <![CDATA[
        <!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" " http://www.w3.org/ TR/html4/strict.dtd">
    <link rel="stylesheet" type="text/css" href="${build.web.baseurl}/style/eureka-apps.css" />
        <style type="text/css">
        .tab-bar
        {
            padding-bottom: 10px ! important;
        }

		.list-view-item, .list-view-item .item-contents
		{
			height:auto;
		}
		.avatar
		{
			display:inline-block;
			*display:inline;
			zoom:1;
			margin-right:10px;
			vertical-align:top;
		}
		.avatar img
		{
			height:35px;
			padding:1px;
			width:35px;
			border:1px solid #BBB;
		}
		.comment .avatar img
		{
			height:25px;
			width:25px;
		}
		.meta
		{
			color:#666;
			font-size:8pt;
			margin-top:4px;
			margin-bottom:4px;
		}
		.post
		{
			white-space:normal;
			line-height:1.5;
			margin-top:3px;
			font-size:12px;
            width: 95%;
		}
		.activity-container
		{
			display:inline-block;
			*display:inline;
			zoom:1;
            width: 80%;
            white-space: normal ! important;
		}
		.comment .activity-container
		{
			margin-top:-5px;
			margin-right:40px;
		}
		div.list-view-item:hover
		{
			background:#EEE
		}
		div.list-view-item .fade-out
		{
			display:none;
		}
		div.post-in-comment
		{
			background:#EEE;
			border-bottom:1px solid #BBB;
			padding:10px;
			overflow:hidden;
			white-space:pre;
		}
		div.comment
		{
			border-bottom:1px solid #BBB;
			padding:10px;
			overflow:hidden;
			white-space:pre;
            padding-left: 20px;
		}
		div.post-in-comment strong, .actor-line
		{
			font-size:13px;
		}
		.actor-line a
		{
			font-weight: bold;
		}
		div.comment strong
		{
			font-size:12px;
		}
		div.post-contents
		{
			position:absolute;
			bottom:0;
			background:#F3F3F3;
			border-top:1px solid #BBB;
			padding:10px;
			height:130px;
			*height:120px;
		}
        div.post-contents div.post-button
        {
            background-image: url(${build.web.baseurl}/style/images/gadget-post.png);
            text-indent: -9999em;
            display: block;
            overflow: hidden;
            width: 46px;
            height: 24px;
            cursor: pointer;
        }
        body div.post-contents div.post-button-disabled
        {
            background-image: url(${build.web.baseurl}/style/images/gadget-post-disabled.png);
        }
		textarea
		{
			border:1px solid #BBB;
			display:block;
			margin-bottom:5px;
			padding:5px;
		}
		.post-button, .cancel-button
		{
			float:right;
		}
		.cancel-button
		{
			padding-left:10px;
			padding-right:2px;
			cursor:pointer;
			color:#0066CC;
            font-size: 12px;
            padding-top: 3px;
		}
        .slide-arrow
        {
            *background-position: top right;
            *width: 30px;
            *margin-right: -15px;
            background-repeat: no-repeat;
        }
        .search-results
        {
            z-index: 101;
        }

        .error
        {
            padding: 10px;
        }

        .error strong
        {
            color: red;
            display: block;
            margin-bottom: 10px;
        }
		
		.tab-bar
		{
			padding-bottom: 5px;
		}
		
		.go-to-stream
		{
			display: block;
			background: transparent url(${build.web.baseurl}/style/images/gadget-jump-out.png) no-repeat scroll 5px 0px;
			text-indent:-1000em;
			overflow:hidden;
			width: 30px;
			height: 23px;
		}

        .search-results-title
        {
            height: 18px; 
            width: 255px; 
            overflow: hidden; 
            float: left;
            padding-top: 3px;
        }
		
        </style>
        <script type="text/javascript" src="${build.web.baseurl}/scripts/external-js-min.js" ></script>
	<script type="text/javascript" src="${build.web.baseurl}/scripts/eureka-apps.js?${timestamp}" ></script>

        <script type="text/os-data" xmlns:os="http://ns.opensocial.org/2008/markup" >
            <os:ViewerRequest key="databindviewer"/>
        </script>
    ]]>
    </Content>

    <Content type="html" view="default,canvas">
    <![CDATA[
        <div id='activity-container'></div>
        <script type="text/javascript">
		
	var prefs_ = new gadgets.Prefs();
	viewerJSON = opensocial.data.DataContext.getDataSet("databindviewer")
	var currentUserName = viewerJSON.accounts[0].username;
	var baseAPIURL = '${build.web.baseurl}/api/0/full';

    if (baseAPIURL.indexOf('/') == 0)
    {
        baseAPIURL = window.location.protocol + "//" + window.location.host + baseAPIURL;
    }


	var maxIds = [];
	var activitiesById = [];
	var baseQuery;
	var main = jQuery("<div/>");
	var currentUser = opensocial.data.DataContext.getDataSet("databindviewer");
	var streamLocation = '';
    var warningText = "";
    var hasBeenClicked = false;
    
    jQuery('body').click(function()
        {
            if(!hasBeenClicked)
            {
                Eureka.makeOauthRequest(buildApiUrl('registerUsageMetric', {"pageView":"false", "streamView":"true"}),
                   function(nothing)
                   {
                       hasBeenClicked = true;
                   }, 1);
            }
        });

	function buildApiUrl(apiName, request, params)
	{
		if (params)
		{
			if (typeof params != 'string')
				params = JSON.stringify(params);
		}
		else if (request)
		{
			if (typeof request == 'object')
				request = JSON.stringify(request);
			params = '{"request":' + request + '}';
		}
		else
			params = '{}';
		
        // Sending an API request with a backslash
	    // raises a 400 error. This happens
        // somewhere in a Tomcat filter when incorrectly
        // decoding %5C%5C as \\. 
        // As a result, this \\ confuses
        // the URL path, which results in a 400 error since there's
        // no corresponding route for the request.                                                               
        // As a workaround, we use <BSLASH> as custom encoding.
        // On the server-side, <BSLASH> gets replaced
        // with a single backslash.                                                                     
        params = params.replace(/\\/g, "<BSLASH>");

		return baseAPIURL + '/' + apiName + '/' + encodeURIComponent(params);
	}
	
	function getAvatar(avatarId, type)
	{
		if (avatarId == null && type == "GROUP") return "${build.web.baseurl}/style/images/noPhoto50-group.png"
		if (avatarId == null && type == "PERSON") return "${build.web.baseurl}/style/images/noPhoto50.png"
		return  "${build.web.baseurl}/eurekastreams/photos?img=s"+avatarId;
	}

	function toggleLikeActivity(activityId)
	{
		var likeLink = jQuery("#like-link");
		var likeAction = "ADD_LIKE";
		
		if (likeLink.text()=="Unlike")
		{
		  likeAction = "REMOVE_LIKE";
		  jQuery("#like-link").text("Like");		  
		  activitiesById[activityId].liked = false;
		}
		else
		{
		  jQuery("#like-link").text("Unlike");
		  activitiesById[activityId].liked = true;
		}

		Eureka.makeOauthRequest(buildApiUrl('setActivityLiked', {"activityId":activityId, "likeActionType":likeAction}),
			function(results)
			{
				var activity = activitiesById[activityId];
				
				var likeLink = jQuery(".like-count");
				if (likeAction == "ADD_LIKE")
				{
					activity.likeCount++;
					jQuery(".likes-link-container").show();					
				} 
				else 
				{
					activity.likeCount--;
					if (activity.likeCount <= 0)
					{
						jQuery(".likes-link-container").hide();	
					}
					
				}
				likeLink.text(activity.likeCount == 1 ? "1 Like" : activity.likeCount + " Likes");
				jQuery(".like-count-number.item" + activityId).text(activity.likeCount);

			}, 1);
	}

	function whoLikedThis(activityId)
	{
		var activity = activitiesById[activityId];
		var whoLikedThisContainer = jQuery("<div></div>");

		Eureka.makeOauthRequest(buildApiUrl('getActivityLikers',activity.id),
			function(results)
			{
				for (var i in results.data)
				{
					var liker = results.data[i];

					var rendered = jQuery("<div class='comment'><div class='avatar'><img src='" + getAvatar(liker.avatarId, "PERSON") + "'></div><div class='activity-container'><div><a target='_blank'  href='${build.web.baseurl}/#people/" + liker.accountId + "'><strong>%LIKERNAME%</strong></a></div></div></div>").appendTo(whoLikedThisContainer);
					rendered.find('strong:contains("%LIKERNAME%")').text(liker.displayName);
				}
			}, 1);

		var scrolledList = new Eureka.ScrolledList(whoLikedThisContainer, function() { scrolledList.endOfList(); }, 356);
		var basicContainer = new Eureka.BasicContainer(scrolledList.getContainer(), "Who Liked This", true, false);
		Eureka.Container.switchView(basicContainer.getContainer());
	}


	function getCommentsPanel()
	{
		var commentDiv = jQuery("#comments-for");
		var activityId = commentDiv.attr("class").split("-")[1];
		var activity = activitiesById[activityId];
		var props = activity.baseObjectProperties;

		var likeStr = activity.liked ? "Unlike" : "Like";
		var likesStr = "";

		if (activity.likeCount == 0)
		{
			likesStr = "<span style='display:none' class='likes-link-container'> • <a class='like-count' href='javascript:whoLikedThis("+activity.id+");'>"+activity.likeCount+" Like</a></span>";
		}
		else if (activity.likeCount == 1)
		{
			 likesStr = "<span class='likes-link-container'> • <a class='like-count' href='javascript:whoLikedThis("+activity.id+");'>"+activity.likeCount+" Like</a></span>";
		}
		else
		{
			 likesStr = "<span class='likes-link-container'> • <a class='like-count' href='javascript:whoLikedThis("+activity.id+");'>"+activity.likeCount+" Likes</a></span>";
		}

		var rendered = commentDiv.html("<div class='post-in-comment'><div class='avatar'><img src='" + getAvatar(activity.actor.avatarId, activity.actor.type) + "'></div><div class='activity-container'><div class='actor-line'><a target='_blank'  href='${build.web.baseurl}/#people/" + activity.actor.uniqueIdentifier + "'><strong>%USERNAME%</strong></a></div><div class='post'></div><div class='meta'>" + eurekastreams.core.getTimeAgo(activity.postedTime) + " • <a id='like-link' href='javascript:toggleLikeActivity(\"" + activity.id + "\");'>" + likeStr + "</a>" + likesStr + "</div></div></div>");
		rendered.find('strong:contains("%USERNAME%")').text(activity.actor.displayName);
		
        if (props.content != null)
        {
            commentDiv.find(".post-in-comment .post").text(props.content.replace('%EUREKA:ACTORNAME%', activity.actor.displayName));
        }
        
        if (props.targetTitle != null && props.targetUrl != null && activity.baseObjectType == "BOOKMARK")
        {
            commentDiv.find(".post-in-comment .post").append("<div><a target='_NEW' href='" + props.targetUrl  + "'>" + props.targetTitle  + "</a></div>");         
        }
        
		if (activity.destinationStream.type == 'RESOURCE')
		{
			var actorLine = rendered.find('div.actor-line');
			actorLine.append(' commented on ');
			jQuery('<a target="_blank"/>').text(props.resourceTitle).attr('href',props.resourceUrl).appendTo(actorLine);
			if (props.siteTitle)
			{
				actorLine.append(' from ');
				jQuery('<a target="_blank"/>').text(props.siteTitle).attr('href',props.siteUrl).appendTo(actorLine);
			}
		}
		
		var commentContainer = jQuery('<div></div>');

		Eureka.makeOauthRequest(buildApiUrl('getActivityById',activity.id),
			function(results)
			{
				for (var i in results.data.comments)
				{
					var comment = results.data.comments[i];

					var renderedComment = jQuery("<div class='comment'><div class='avatar'><img src='" + getAvatar(comment.authorAvatarId, "PERSON") + "'></div><div class='activity-container'><div><a target='_blank'  href='${build.web.baseurl}/#people/" + comment.authorAccountId + "'><strong>%USERNAME%</strong></a></div><div class='post'></div><div class='meta'>" + eurekastreams.core.getTimeAgo(comment.timeSent) + "</div></div></div>").appendTo(commentContainer);
					renderedComment.find('.post').text(comment.body);
					renderedComment.find('strong:contains("%USERNAME%")').text(comment.authorDisplayName);
				}
			}, 1);

		var scrollHeight = jQuery("body").height() - 40 - commentDiv.height() - 41;

		var scrolledList = new Eureka.ScrolledList(commentContainer, function() { scrolledList.endOfList(); }, scrollHeight);
		commentDiv.append(scrolledList.getContainer());
		
		var postCommentBox = new Eureka.PostBox("Post a Comment...", function(comment)
		{
			var renderedComment = jQuery("<div class='comment'><div class='avatar'><img src='" + currentUser.thumbnailUrl + "'></div><div class='activity-container'><div><a target='_blank' href='" + currentUser.profileUrl + "'><strong>%USERNAME%</strong></a></div><div class='post'></div><div class='meta'>Less than 1 minute ago</div></div></div>").appendTo(commentContainer);
			renderedComment.find('.post').text(comment);
			renderedComment.find('strong:contains("%USERNAME%")').text(currentUser.name.formatted);

			scrolledList.scrollToBottom(0);

			Eureka.makeOauthRequest(buildApiUrl('postActivityCommentDTO',{"activityId":activity.id, "body":comment}),
				function(results)
				{
				}, 1);
				
			activity.commentCount++;
			jQuery(".comment-count-number.item" + activityId).text(activity.commentCount);
			
		}, 1000, warningText);
		commentDiv.append(postCommentBox.getContainer());
	}

	function getOtherSorts(sort, keywords, className)
	{
		var query = jQuery.extend(true, {}, baseQuery);
		query.count="50";
		query.query.sortBy = sort;

		if (keywords != "")
		{
			query.query.keywords = keywords;
		}
        
		query = gadgets.json.stringify(query).replace(/\"/g, "'");

		Eureka.makeOauthRequest(buildApiUrl('getActivitiesByRequest', '"' + query + '"'),
		function(results)
		{
			if (results.data.pagedSet.length > 0)
			{
				var newActivityList = createScrolledActivityList(results.data.pagedSet, sort, keywords);
				jQuery("."+className).append(newActivityList); 
				jQuery("."+className).css("height", "auto");
			}
		}, 1);
	}

	function createActivityList(activities, keywords, sort)
	{
		var activityList = new Eureka.ListView();

		for (i in activities)
		{
			var activity = activities[i];
			var id = activity.id;
			activitiesById[id] = activity;

            var activityStr = "<div><div class='avatar'><img src='" + getAvatar(activity.actor.avatarId, activity.actor.type) + "'></div>" +
            	"<div class='activity-container'><div><strong>%ACTORNAME%</strong>";

			var actorLineReplacements = {};
            if (activity.destinationStream.type != activity.actor.type || activity.destinationStream.destinationEntityId != activity.actor.id)
            {
				if (activity.destinationStream.type == 'RESOURCE')
				{
					actorLineReplacements['RESOURCETITLE'] = activity.baseObjectProperties.resourceTitle;
					activityStr += " commented on <strong>%RESOURCETITLE%</strong>";
					if (activity.baseObjectProperties.siteTitle)
					{
						actorLineReplacements['SITETITLE'] = activity.baseObjectProperties.siteTitle;
						activityStr += " from <strong>%SITETITLE%</strong>";
					}
				}
				else
				{
					actorLineReplacements['DESTNAME'] = activity.destinationStream.displayName;
					activityStr += " to <strong>%DESTNAME%</strong>";
				}
            }

            activityStr += "</div><div class='post item"+id+"'></div>" + 
            	"<div class='meta'>"+eurekastreams.core.getTimeAgo(activity.postedTime) +
            	" • <span class='comment-count-number item" + id +"'>" + activity.commentCount + "</span> comments • " +
            	"<span class='like-count-number item" + id +"'>" + activity.likeCount + "</span> likes</div></div></div>";

			var item = activityList.addItem(activityStr,"", "",new Eureka.BasicContainer(jQuery("<div id='comments-for' class='act-"+activity.id+"'></div>"), "Comments", true, false).getContainer(), function(count) { getCommentsPanel(); }, true);

			item.find('strong:contains("%ACTORNAME%")').text(activity.actor.displayName);
			for (var key in actorLineReplacements)
			{
				item.find('strong:contains("%' + key + '%")').text(actorLineReplacements[key]);
			}
			
            if (activity.baseObjectProperties.content != null)
            {
                item.find(".post.item"+id).text(activity.baseObjectProperties.content.replace('%EUREKA:ACTORNAME%', activity.actor.displayName));
            }

            if (activity.baseObjectProperties.targetTitle != null && activity.baseObjectProperties.targetUrl != null && activity.baseObjectType == "BOOKMARK")
            {
			    item.find(".post.item"+id).append("<div><a target='_NEW' href='" + activity.baseObjectProperties.targetUrl  + "'>" + activity.baseObjectProperties.targetTitle  + "</a></div>");
                if (activity.baseObjectProperties.description != null)
                {
			        item.find(".post.item"+id).append("<div>" + activity.baseObjectProperties.description + "</div>");
                }
            }
			maxIds[keywords] = id;
		}

		return activityList;
	}
	
	function createScrolledActivityList(activities, sort, keywords)
	{
		var activityList = createActivityList(activities, keywords, sort);
		var container = new jQuery("<div></div>");
		var scrolledList = new Eureka.ScrolledList(activityList.getContainer(), function() 
			{
			    if (sort == null)
			    {
				var query = jQuery.extend(true, {}, baseQuery);
				query.maxId = maxIds[keywords];
				if (keywords != "")
				{
					query.query.keywords = keywords;
				}
                
                //Default to data sort if none is provided.
                query.query.sortBy = 'date';

				var request = '"' + gadgets.json.stringify(query).replace(/\"/g, "'") + '"';
				Eureka.makeOauthRequest(buildApiUrl('getActivitiesByRequest', request),
					function(results)
					{
						if (results.data.pagedSet.length > 0)
						{
                            var newActivityList = createActivityList(results.data.pagedSet, keywords, sort);
							scrolledList.appendToList(newActivityList.getContainer()); 
                            Eureka.resize();
						}
						else
						{
							scrolledList.endOfList();
						}
					}, 1);
			    }
			    else
			    {
				scrolledList.endOfList();
			    }
			}, 356);

		container.append(scrolledList.getContainer());

		if (baseQuery.query.recipient != null && baseQuery.query.recipient[0].type=="GROUP")
		{
			var postBox = new Eureka.PostBox("Post to the Group...", function(message)
			{
			    Eureka.makeOauthRequest(buildApiUrl('postGroupActivityDTO', {"activityDTO":{"baseObjectType":"NOTE", "verb":"POST", "destinationStream":{"type":"GROUP", "uniqueIdentifier":baseQuery.query.recipient[0].name}, "baseObjectProperties":{"content":message}}}),
				function(nothing)
				{
                    eurekastreams.core.refreshCurrentGadget();
				}, 1);
			
			}, 250, warningText);
			container.append(postBox.getContainer());
		}
		return container;
	}        

	function getMain(activityJSON, keywords)
	{
		var rand = Math.floor(Math.random()*10000);

		var main = jQuery("<div/>");
				
        	var tabContainer = new Eureka.TabPanel();
		tabContainer.addTab("Recent", createScrolledActivityList(activityJSON, null, keywords));
		tabContainer.addTab("Popular", jQuery("<div style='height:397px' class='interesting"+rand+"'></div>"), false, function() { getOtherSorts("interesting", keywords, "interesting"+rand); });
		tabContainer.addTab("Active", jQuery("<div style='height:397px' class='commentdate"+rand+"'></div>"), true, function() { getOtherSorts("commentdate", keywords, "commentdate"+rand); });
                main.append(tabContainer.getContainer());
		return main;
				
	}

	function renderMain(results, hideSearch)
	{
		var activityJSON = results.data.pagedSet;
		var search = new Eureka.SearchBar(function(value)
		{	
			var query = jQuery.extend(true, {}, baseQuery);
			query.query.keywords = value;
            
            if(query.query.sortBy == null)
            {
                query.query.sortBy = 'date';
            }

			var request = '"' + gadgets.json.stringify(query).replace(/\"/g, "'") + '"';
			Eureka.makeOauthRequest(buildApiUrl('getActivitiesByRequest', request),
			function(results)
			{
				search.setResultsPanel(getMain(results.data.pagedSet, value));
			}, 1);
		});
		
		if (streamLocation)
		{
			search.addObj(jQuery('<a href="${build.web.baseurl}/#' + streamLocation + '" target="_blank" class="go-to-stream" title="Go to Stream">Go to Stream</a>'));
		}
		
        if (hideSearch)
        {
            main.append('<div class="title-bar search-keywords"><div class="search-results-title">Results for: '+hideSearch+'</div><a href="${build.web.baseurl}/#' + streamLocation + '" target="_blank" class="go-to-stream" style="float: right" title="Go to Stream">Go to Stream</a></div>');
        }
        else
        {
	    	main.append(search.getContainer());
        }
        main.append(getMain(activityJSON, ""));
	}

	function renderResults(results, hideSearch)
	{
       		Eureka.Container.init("activity-container", false);
		renderMain(results, hideSearch);
		Eureka.Container.switchView(main);
	}

	function render()
	{
		var prefs_ = new gadgets.Prefs();
		var queryString = prefs_.getString("streamQuery");
		streamLocation = prefs_.getString("streamLocation");
        gadgets.window.setTitle(gadgets.util.unescapeString(prefs_.getString("gadgetTitle")));
        Eureka.makeOauthRequest(buildApiUrl('getSystemSettings'),
        function(results) {
            warningText = results.data.contentWarningText;
		
		    if (queryString.indexOf("saved/")>-1)
	    	{
    			var streamId = queryString.split("/")[1];

		    	// I only have an ID, get the stream from the users list and extract the query from it.
	    		Eureka.makeOauthRequest(buildApiUrl('getCurrentUserStreams'),
    				function(results) { 
                        var found = false;
    					for (var i in results.data.streamFilters)
	    				{
    						if (results.data.streamFilters[i].id==streamId)
	    					{
                                found = true;
                                baseQuery = gadgets.json.parse(results.data.streamFilters[i].request);
                                var jsonQuery = jQuery.extend(true, {}, baseQuery);
                                if(jsonQuery.query.sortyBy == null)
                                {
                                    jsonQuery.query.sortBy = 'date';
                                }
                                var hideSearch = false;
                                if (jsonQuery.query.keywords)
                                {
                                    hideSearch = jsonQuery.query.keywords;
                                }
                            
								var request = '"' + gadgets.json.stringify(jsonQuery).replace(/\"/g, "'") + '"';
								Eureka.makeOauthRequest(buildApiUrl('getActivitiesByRequest', request),
						    		function(results) { renderResults(results, hideSearch); }, 1);
                                found = true;
				    		}
			    		}		

                        if (found == false)
                        {
                            jQuery("body").html("<div class='error'><strong>Content no longer valid</strong> This stream has been deleted.</div>");
                        }
    
	    			}, 1);

    		}
	    	else
    		{
                baseQuery = gadgets.json.parse(queryString.replace(/&#34;/g, "\""));
                var jsonQuery = jQuery.extend(true, {}, baseQuery);
                if(jsonQuery.query.sortyBy == null)
                {
                    jsonQuery.query.sortBy = 'date';
                }
				var request = '"' + gadgets.json.stringify(jsonQuery).replace(/\"/g, "'") + '"';
				Eureka.makeOauthRequest(buildApiUrl('getActivitiesByRequest', request),
                    function(results) { renderResults(results); }, 1);
    		}
        }, 1);

	}

	function init()
	{
		render();
	}
            
	setTimeout(function() {init();}, 100);
        </script>
    ]]>
    </Content>


</Module>
